<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CS61A——函数</title>
      <link href="/2022/01/02/CS61A-02-Functions/"/>
      <url>/2022/01/02/CS61A-02-Functions/</url>
      
        <content type="html"><![CDATA[<h2 id="表达式和值"><a href="#表达式和值" class="headerlink" title="表达式和值"></a>表达式和值</h2><h3 id="程序干了些啥"><a href="#程序干了些啥" class="headerlink" title="程序干了些啥"></a>程序干了些啥</h3><ol><li><p>程序通过操纵<strong>值</strong>来运行；</p></li><li><p>程序中的<strong>表达式</strong>求值为<strong>值</strong>；</p><p>表达式：<code>&#39;d&#39; + &#39;og&#39;</code>;</p><p>值：<code>&#39;dog&#39;</code></p></li><li><p>Python解释器求表达式的值然并显示值</p></li></ol><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>每个值都有特定的数据类型：</p><table><thead><tr><th>数据类型</th><th>示例值</th></tr></thead><tbody><tr><td>整数（Integer）</td><td><code>2</code>、<code>33</code>、<code>-1</code></td></tr><tr><td>浮点数（Float）</td><td><code>2.71</code>、<code>33.0</code>、<code>-1.9</code></td></tr><tr><td>布尔值（Boolean）</td><td><code>True</code>、<code>False</code></td></tr><tr><td>字符串（String）</td><td><code>&#39;dag&#39;</code>、<code>&#39;33&#39;</code>、<code>&#39;asdg-!@&#39;</code></td></tr></tbody></table><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>每个表达式都描述了一个计算并求值，比如可以使用运算符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">18</span> + <span class="number">72</span></span><br><span class="line"><span class="number">6</span> / <span class="number">29</span></span><br><span class="line"><span class="number">2</span> * <span class="number">10</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">32</span></span><br></pre></td></tr></table></figure><h3 id="调用表达式"><a href="#调用表达式" class="headerlink" title="调用表达式"></a>调用表达式</h3><p>一些表达式调用了函数，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">32</span>)</span><br><span class="line"><span class="built_in">max</span>(<span class="number">2</span>, <span class="number">2048</span>)</span><br><span class="line"><span class="built_in">min</span>(-<span class="number">1</span>, -<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>用运算符的也可以表示为调用函数，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">32</span></span><br><span class="line"><span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">32</span>)</span><br></pre></td></tr></table></figure><p>甚至可以这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line"><span class="number">18</span> + <span class="number">69</span></span><br><span class="line">add(<span class="number">18</span>, <span class="number">69</span>)</span><br></pre></td></tr></table></figure><p>区别在于<code>pow()</code>函数是内置的（<strong>built-in</strong>），Python环境自带，但是像<code>add</code>这种就得从标准库中导入（import）进来。</p><h3 id="一个调用表达式的分析"><a href="#一个调用表达式的分析" class="headerlink" title="一个调用表达式的分析"></a>一个调用表达式的分析</h3><p><img src="/2022/01/02/CS61A-02-Functions/image-20220102024904177.png" alt="image-20220102024904177"></p><p>Python计算调用表达式的过程：</p><ol><li>求操作符（Operator）的值；</li><li>求操作数（Operand）的值；</li><li>把操作符（<strong>函数</strong>）应用到操作数（<strong>参数</strong>）上；</li></ol><p>操作符和操作数也都是表达式，所以必须要被求值。</p><h3 id="计算嵌套表达式"><a href="#计算嵌套表达式" class="headerlink" title="计算嵌套表达式"></a>计算嵌套表达式</h3><p><img src="/2022/01/02/CS61A-02-Functions/image-20220102025249148.png" alt="image-20220102025249148"></p><p>这就是一个表达式树（Expression Tree）</p><p>从外到里调用，从里到外返回值。</p><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><h3 id="命名-1"><a href="#命名-1" class="headerlink" title="命名"></a>命名</h3><p>一个命名可以绑定到一个值上，一种方法就是声明语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span> <span class="comment"># x是命名，1是值</span></span><br></pre></td></tr></table></figure><p>这个值也可以是表达式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span> - <span class="number">4</span> / <span class="number">5</span> <span class="comment"># x是命名，1 + 2 * 3 - 4 / 5是值</span></span><br></pre></td></tr></table></figure><h3 id="使用命名"><a href="#使用命名" class="headerlink" title="使用命名"></a>使用命名</h3><p>一个命名可以被引用多次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">result1 = x * y</span><br><span class="line">result2 = x + y</span><br></pre></td></tr></table></figure><p>绑定到数据值的命名就叫做变量。</p><h3 id="命名重绑定"><a href="#命名重绑定" class="headerlink" title="命名重绑定"></a>命名重绑定</h3><p>一个命名只能绑定一个值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_name = <span class="string">&quot;3rr0r&quot;</span></span><br><span class="line">my_name = my_name + <span class="string">&quot;0r0r&quot;</span></span><br></pre></td></tr></table></figure><p>代码不会保存，但<code>my_name</code>会绑定新的值<code>3rr0r0r0r</code>。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>下面的代码输出啥？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">min</span></span><br><span class="line">f = <span class="built_in">max</span></span><br><span class="line">g = <span class="built_in">min</span></span><br><span class="line">h = <span class="built_in">max</span></span><br><span class="line"><span class="built_in">max</span> = g</span><br><span class="line"><span class="built_in">max</span>(f(<span class="number">2</span>, g(h(<span class="number">1</span>, <span class="number">5</span>), <span class="number">3</span>)), <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>结果为<strong>3</strong>。</p><h2 id="环境图表"><a href="#环境图表" class="headerlink" title="环境图表"></a>环境图表</h2><h3 id="环境图表（Environment-diagrams）"><a href="#环境图表（Environment-diagrams）" class="headerlink" title="环境图表（Environment diagrams）"></a>环境图表（Environment diagrams）</h3><p>环境图表用于可视化Python是如何执行程序的。</p><p>这个网页可以生成环境图表<a href="https://pythontutor.com/composingprograms.html#mode=edit">Online Python Tutor - Composing Programs - Python 3</a>)。</p><p><img src="/2022/01/02/CS61A-02-Functions/image-20220102161519234.png" alt="image-20220102161519234"></p><p>左边一栏箭头指示指令执行的顺序，绿的表示刚执行过了，红色表示马上执行。</p><p>右边每个命名绑定到一个值上，一帧内每个命名不能重复。</p><h3 id="环境图表中的赋值"><a href="#环境图表中的赋值" class="headerlink" title="环境图表中的赋值"></a>环境图表中的赋值</h3><p>Python解释赋值语句的过程：</p><ol><li>求<code>=</code>右边的表达式；</li><li>绑定表达式的值到<code>=</code>左边的命名上；</li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h3><p>函数是一个代码序列，执行一个特定的任务，可以被重复使用。</p><p>比如已经用过的两个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">18</span>, <span class="number">69</span>)</span><br><span class="line">mul(<span class="number">60</span>, sub(<span class="number">5</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>每个函数接受输入（参数，argument）并返回一个输出（返回值，return value）。</p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>Python中最常用的定义函数的方法是<code>def</code>语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> &lt;函数名&gt;(<span class="params">&lt;参数列表&gt;</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &lt;<span class="keyword">return</span> 表达式&gt;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br></pre></td></tr></table></figure><p>定义完了之后，我们可以调用它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">add(<span class="number">18</span>, <span class="number">69</span>)</span><br></pre></td></tr></table></figure><h3 id="关于函数定义的分析"><a href="#关于函数定义的分析" class="headerlink" title="关于函数定义的分析"></a>关于函数定义的分析</h3><p>函数的第一行叫做函数签名（function signature），其后所有的行都是函数体（function body）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> &lt;<span class="title">name</span>&gt;(<span class="params">&lt;parameters&gt;</span>):</span>        <span class="comment"># ← 函数签名</span></span><br><span class="line">    <span class="keyword">return</span> &lt;<span class="keyword">return</span> expression&gt;   <span class="comment"># ← 函数体</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> &lt;<span class="title">name</span>&gt;(<span class="params">&lt;parameters&gt;</span>):</span>        <span class="comment"># ← 函数签名</span></span><br><span class="line">    <span class="keyword">return</span> &lt;<span class="keyword">return</span> expression&gt;   <span class="comment"># ← 函数体</span></span><br></pre></td></tr></table></figure><p>函数体可以有很多行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">num1, num2</span>):</span>             <span class="comment"># ← 函数签名</span></span><br><span class="line">    <span class="built_in">sum</span> = num1 + num2            <span class="comment"># ← 函数体</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>                   <span class="comment"># ← 函数体</span></span><br></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>可以传递任意表达式作为参数。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">add(x, y)</span><br><span class="line"></span><br><span class="line">x = <span class="number">3</span></span><br><span class="line">add(x * x, x + x)</span><br></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>关键词<code>return</code>会返回一个值给调用函数的地方，并退出函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = add(<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>也可以在表达式内部调用函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">big_sum = add(<span class="number">200</span>, <span class="number">412</span>) + add(<span class="number">312</span>, <span class="number">256</span>)</span><br></pre></td></tr></table></figure><p>还可以在函数中嵌套函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">huge_sum = add(add(<span class="number">200</span>, <span class="number">412</span>), add(<span class="number">312</span>, <span class="number">256</span>))</span><br></pre></td></tr></table></figure><h3 id="发现错误"><a href="#发现错误" class="headerlink" title="发现错误"></a>发现错误</h3><ol><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">    <span class="built_in">sum</span> = num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = add(<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>返回语句之后的语句不会再执行，那一行应该在返回语句之前。</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>():</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = add(<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>函数体中的语句指向了不存在的变量，这里它们应该是函数签名中的参数。</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = add(<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>函数体没有返回值，但是调用它的地方想用它的结果，所以应该有个返回<code>sum</code>的语句。</p></li></ol><h3 id="环境图表中的函数"><a href="#环境图表中的函数" class="headerlink" title="环境图表中的函数"></a>环境图表中的函数</h3><p>Python解释<code>def</code>语句的过程：</p><ol><li>用函数名（name）和参数列表（parameters）创建一个函数；</li><li>函数体设置为第一行之后的缩进的所有语句；</li><li>绑定函数名到函数体（类似于赋值语句）；</li></ol><p><img src="/2022/01/02/CS61A-02-Functions/image-20220102165146936.png" alt="image-20220102165146936"></p><h3 id="环境图表中的函数调用"><a href="#环境图表中的函数调用" class="headerlink" title="环境图表中的函数调用"></a>环境图表中的函数调用</h3><p>Python解释函数调用的过程：</p><ol><li>在环境中创建新的<strong>一帧</strong>；</li><li>绑定函数调用的参数（arguments）到该帧的参数列表（parameters）；</li><li>在新的帧中执行函数体；</li></ol><p><img src="/2022/01/02/CS61A-02-Functions/image-20220102165512600.png" alt="image-20220102165512600"></p><h2 id="关于命名的其他细节"><a href="#关于命名的其他细节" class="headerlink" title="关于命名的其他细节"></a>关于命名的其他细节</h2><h3 id="命名和环境"><a href="#命名和环境" class="headerlink" title="命名和环境"></a>命名和环境</h3><p>所有的Python代码都在一个<strong>环境</strong>（environment）的上下文中求值，环境就是帧的序列。</p><p>比如前面，调用<code>add</code>函数的地方就是全局帧（Global frame），进入函数后就是到了函数的局部帧（Local frame），也是全局帧的子帧。</p><h3 id="命名查找规则"><a href="#命名查找规则" class="headerlink" title="命名查找规则"></a>命名查找规则</h3><p>Python中在用户定义的函数中是怎么查找命名的（简化版本）：</p><ol><li>在局部帧中查找；</li><li>如果命名不在局部帧中，就到全局帧中查找；</li><li>如果都不在，那就抛出命名错误（NameError）；</li></ol><p>命名错误长这样：</p><img src="/2022/01/02/CS61A-02-Functions/image-20220102170356438.png" alt="image-20220102170356438" style="zoom:50%;"><h3 id="命名查找例子"><a href="#命名查找例子" class="headerlink" title="命名查找例子"></a>命名查找例子</h3><ol><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exclamify</span>(<span class="params">text</span>):</span></span><br><span class="line">    start_exclaim = <span class="string">&quot;¡&quot;</span></span><br><span class="line">    end_exclaim = <span class="string">&quot;!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> start_exclaim + text + end_exclaim</span><br><span class="line"></span><br><span class="line">exclamify(<span class="string">&quot;the snails are eating my lupines&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>第四行的<code>start_exclaim</code>在局部帧中找到；</li><li>第四行的<code>text</code>在<strong>局部帧</strong>中找到，因为调用函数的时候局部变量<code>text</code>被赋予了值；</li><li>第六行的<code>exclamify</code>在全局帧中找到，因为是在全局帧中定义的；</li></ol></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">start_exclaim = <span class="string">&quot;¡&quot;</span></span><br><span class="line">end_exclaim = <span class="string">&quot;❣️&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exclamify</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="keyword">return</span> start_exclaim + text + end_exclaim</span><br><span class="line"></span><br><span class="line">exclamify(<span class="string">&quot;the voles are digging such holes&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>第五行的<code>start_exclaim</code>在全局帧中找到；</li><li>第五行的<code>text</code>在局部帧中找到；</li><li>第六行的<code>exclamify</code>在全局帧中找到;</li></ol></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exclamify</span>(<span class="params">text</span>):</span></span><br><span class="line">    end_exclaim = <span class="string">&quot;⁉️️️&quot;</span></span><br><span class="line">    <span class="keyword">return</span> start_exclaim + text + end_exclaim</span><br><span class="line"></span><br><span class="line">exclamify(<span class="string">&quot;the voles are digging such holes&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li><code>start_exclaim</code>会导致报错“NameError”，因为它没赋值；</li><li>在调用<code>exclamify</code>函数，尝试执行到那条语句的时候才会报错；</li></ol></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>程序由<strong>语句</strong>或计算机指令组成，包括描述了如何求值的<strong>表达式</strong>；</li><li><strong>值</strong>可以赋值到<strong>命名</strong>上来避免重复计算；</li><li><strong>赋值语句</strong>将表达式的值赋值给当前<strong>环境</strong>的一个命名；</li><li><strong>函数</strong>封装了一系列将<strong>参数</strong>映射到<strong>返回值</strong>的语句；</li><li><strong><code>def</code>语句</strong>会创建一个具有特定<strong>参数</strong>和<strong>函数体</strong>的函数对象，并将其绑定到当前环境的一个命名上；</li><li>函数<strong>调用表达式</strong>将其<strong>运算符</strong>（函数）的值应用于值或<strong>操作数</strong>（一些参数）。</li></ol><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><h3 id="A-Plus-Abs-B"><a href="#A-Plus-Abs-B" class="headerlink" title="A Plus Abs B"></a>A Plus Abs B</h3><p>求<code>a</code>加上<code>b</code>的绝对值的值，填空：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_plus_abs_b</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a+abs(b), but without calling abs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, -3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> b &lt; <span class="number">0</span>:</span><br><span class="line">        f = _____</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = _____</span><br><span class="line">    <span class="keyword">return</span> f(a, b)</span><br></pre></td></tr></table></figure><p>第一个填<code>sub</code>，第二个填<code>add</code>。</p><h3 id="Two-of-Three"><a href="#Two-of-Three" class="headerlink" title="Two of Three"></a>Two of Three</h3><p>对于三个正数，返回其中两个最小值的数的平方和，填空，要求不超过一行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two_of_three</span>(<span class="params">x, y, z</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a*a + b*b, where a and b are the two smallest members of the</span></span><br><span class="line"><span class="string">    positive numbers x, y, and z.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(1, 2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 3, 1)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(10, 2, 8)</span></span><br><span class="line"><span class="string">    68</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 5, 5)</span></span><br><span class="line"><span class="string">    50</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> _____</span><br></pre></td></tr></table></figure><p>可以填<code>min(x, y) * min(x, y) + min(max(x, y), z) * min(max(x, y), z)</code>，但是非常不优雅，可以考虑填<code>x**2 + y**2 + z**2 - max(x, y, z)**2</code>。</p><p>虽然看起来更优雅了，但是计算量也更大了（只比较了一次，但计算了四次平方）。</p>]]></content>
      
      
      <categories>
          
          <category> UC Berkeley EECS </category>
          
          <category> UC Berkeley EECS CS61A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS61A </tag>
            
            <tag> UC Berkeley </tag>
            
            <tag> The Structure and Interpretation of Computer Programs </tag>
            
            <tag> 入门级别课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS61A——Welcome!</title>
      <link href="/2022/01/02/CS61A-01-Welcome!/"/>
      <url>/2022/01/02/CS61A-01-Welcome!/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机科学的简单介绍"><a href="#计算机科学的简单介绍" class="headerlink" title="计算机科学的简单介绍"></a>计算机科学的简单介绍</h2><p><img src="/2022/01/02/CS61A-01-Welcome!/image-20220102014914184.png" alt="image-20220102014914184"></p><h2 id="课程主题"><a href="#课程主题" class="headerlink" title="课程主题"></a>课程主题</h2><ol><li>管理程序的复杂度（过程抽象、数据抽象、编程范式）</li><li>深入理解编程概念（用Python）</li><li>计算机如何解释计算机程序</li><li>不同类型的语言（Regex、BNF、SQL、Scheme）</li><li>解决问题的技巧（迭代和递归）</li></ol><h2 id="前置课程"><a href="#前置课程" class="headerlink" title="前置课程"></a>前置课程</h2><p>数学</p><p>顺便推荐了个课程：CS 10</p><h2 id="课程组成"><a href="#课程组成" class="headerlink" title="课程组成"></a>课程组成</h2><ol><li>讲座</li><li>实验</li><li>讨论</li><li>作业</li><li>项目</li><li>考试</li><li>文献</li></ol>]]></content>
      
      
      <categories>
          
          <category> UC Berkeley EECS </category>
          
          <category> UC Berkeley EECS CS61A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS61A </tag>
            
            <tag> UC Berkeley </tag>
            
            <tag> The Structure and Interpretation of Computer Programs </tag>
            
            <tag> 入门级别课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apng2gif各种问题的解决</title>
      <link href="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="事情起因"><a href="#事情起因" class="headerlink" title="事情起因"></a>事情起因</h2><p>追溯起来已经是两年多以前的事情了，当时有个表情包在Line上火了起来，之后血洗国内各大平台，这个表情包就是<strong>Menhera酱</strong>。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/NanaseKurumi.jpg" alt="NanaseKurumi"></p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/NanaseKonomi.jpg" alt="NanaseKonomi"></p><p>谁会抗拒可爱的事物呢？所以当时我就立志要把她们的表情包都给要了，最开始就是通过网友们的搬运，在百度网盘等地方收集。</p><p>但是时间久了，Menhera酱的热度也下去了，没有多少人再收集了，有多少人的喜欢能像我一样始终如一呢？</p><p>这时候我强迫症就来了，收集不完整那多难受啊，所以我决定亲自上Line收集。</p><p>上Line是需要魔法的，当时用了点魔法，又在Chrome上找了个插件，成功地把所有她们的表情都下载了下来。</p><p>但是！</p><p>Line上的动图是PNG格式的，更准确地来说是APNG格式的，这样的动图在微信上是用不了的，放上去就是张不动的图片，甚至背景还是黑乎乎的。</p><p>微信只支持GIF的动图，这我可忍不了，必须得给安排了！</p><h2 id="艰辛的转换历程"><a href="#艰辛的转换历程" class="headerlink" title="艰辛的转换历程"></a>艰辛的转换历程</h2><h3 id="找工具阶段"><a href="#找工具阶段" class="headerlink" title="找工具阶段"></a>找工具阶段</h3><p>最开始肯定是找别人做好的批量转换的工具，关键词搜apng2gif，当然有一堆博文和工具了。</p><p>尝试了一个据说很好用的工具isparta，下载了很久很久很久才下载好。转换时间很长，但结果转换出来很多都有问题，在电脑上可以正常播放，但发送到微信上<strong>一遍播放完了就会花屏</strong>。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/e38e75791d5535498e6c9c0b3463f07.jpg" alt="e38e75791d5535498e6c9c0b3463f07"></p><p>感觉可能是版本bug，就有花了好久下载其他版本，结果都不好用，只能放弃了这个软件。</p><p>然后又找到了一个在线转换的网站，需要配置很多参数，生成了一张试试效果居然还不错。</p><p>但是这个网站毕竟在线的，自动化程度不高，网络连接也比较慢，批量处理肯定是个大工程，只好放弃了。</p><p>这是第一次尝试。</p><h3 id="自己造轮子阶段"><a href="#自己造轮子阶段" class="headerlink" title="自己造轮子阶段"></a>自己造轮子阶段</h3><p>后来的某一天又想起了这件事，决定重新思考一下怎么弄。</p><p>APNG格式诞生这么长时间了，肯定有很多资料吧？</p><p>思路是这样的，APNG是动图，肯定是由很多帧组成的，把这些帧给提取出来，然后再合成GIF不就行了？</p><p>找了一些资料，写了一个python程序，导出了一张APNG的各帧。</p><p>结果发现问题很大，APNG的每一帧并不是完整的一张图片，而是和上一帧有变化的地方！</p><p>最后合成出来的东西就很鬼畜，参见下图：</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/69594924.gif" alt="69594924"></p><p>心情就很不美丽了，费这么大劲你给我合成出了啥奇怪的东西？</p><p>又在Github上找到了一个湾湾同胞写的python程序，反复调试运行都没法得到正确结果。</p><p>后来也有构思，还是解析合成的思路，只要把每一帧放在相应的坐标就行了，但是想了想太复杂就放弃了。</p><p>这是第二次尝试</p><h3 id="改造轮子阶段"><a href="#改造轮子阶段" class="headerlink" title="改造轮子阶段"></a>改造轮子阶段</h3><p>这两天看到了七濑胡桃公众号推送的文章，其中有一张可爱的动图，就转发给了对象，结果她直呼好可爱！</p><p>虽然尝试了那么多次，也失败了那么多次，但是这次一定要成功。</p><h4 id="发现新轮子"><a href="#发现新轮子" class="headerlink" title="发现新轮子"></a>发现新轮子</h4><p>思路还是先看看有没有现成的轮子，当然是有的！</p><p>我尝试了pip中的apng2gif包，完全不好使，甚至正常播放都不行。于是去找到了源代码，结果……</p><p>这不就是我上次参考的那个Github上的源代码吗？</p><p>放弃！</p><p>但是，我在命令行中不小心输入了apng2gif，忘记了加后缀，结果提示我可以通过apt安装？</p><p>原来Linux上也是有现成轮子可以用的！赶紧apt了下来。</p><p>这个程序的使用很简单：</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/1603255890727.png" alt="1603255890727"></p><p>试了一张APNG动图，导出的GIF效果居然还挺好？</p><p>立刻发到微信上试试，结果还是<strong>播放一遍就花屏</strong>，果然还是不靠谱。</p><h4 id="给轮子加一轮转换"><a href="#给轮子加一轮转换" class="headerlink" title="给轮子加一轮转换"></a>给轮子加一轮转换</h4><p>但是这个播放一遍就花屏问题，似乎就是因为它只循环了一遍？那我只需要把GIF的循环设置为一直循环不就可以了？</p><p>可惜的是这个工具并没有这个选项。</p><p>不过现在又可以造轮子了呀，这次只需要解析GIF的每一帧，然后合成，保存的时候设置loop为0就行了！</p><p>遗憾的是这么做还是存在问题。</p><p>有一个保存选项是disposal，设置为3的时候不会出现重影，但是存在部分帧只显示一部分的情况。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/new69594922.gif" alt="new69594922"></p><p>disposal设置为1或0的时候虽然会显示完整，但是会有重影。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/newani.gif" alt="newani"></p><p>再然后就是关于duration的奇怪问题，即使设置新gif的duration（帧间时长）和旧的duration一样，最后导出的gif的duration会变成两倍，不知何故！设置为一半时反而可以一样。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/1603256906973.png" alt="1603256906973"></p><p>总之还是有问题的。</p><h4 id="换个方式给轮子加一轮转换"><a href="#换个方式给轮子加一轮转换" class="headerlink" title="换个方式给轮子加一轮转换"></a>换个方式给轮子加一轮转换</h4><p>既然这个轮子和我的需求只相差一个loop的值的问题，那我直接修改那个值不就好了？</p><p>GIF文件中肯定有特定的位用来存放loop的值。去找了GIF文件格式，也不知怎么搞的，网上都是互相转载的，没有找到直接的资料，最后找到一份代码中倒是有文件的详细结构。</p><p>经过分析，对文件进行16进制搜索，找到“NETSCAPE2.0”，再往后数第三、四个字节就是了。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/1603257569580.png" alt="1603257569580"></p><p>将荧光笔标记的01改成00，loop就从一次变成无限循环了（下面两张分别为循环一次和无数次）。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/ani.gif" alt="ani"></p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/ani2.gif" alt="ani2"></p><p>这个方案确实有效！</p><p>那么编程思路也很简单，以16进制的方式读取文件，然后匹配并找到“NETSCAPE2.0”，确定loop值对应的位置，然后将值直接修改为0保存即可。</p><h4 id="修改轮子"><a href="#修改轮子" class="headerlink" title="修改轮子"></a>修改轮子</h4><p>但是我没有按照上一部分的思路去写程序，别问，问就是懒。</p><p>我们换个思路，既然apng2gif这个工具最后合成了GIF，必然也写入了loop位，我们直接修改该工具的源代码不就可以了？</p><p>费了好大劲从SourceForge上下载了源码，因为下载各种失败，然后切换镜像。</p><p>找到源代码之后就简单了，在代码中合成GIF之前的位置，加入一句代码即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num_loops = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>重新make生成可执行文件，再尝试转换发现达到了想要的效果。</p><p>make过程中提示“-lpng”选项的问题，通过apt安装<code>libpng-dev</code>即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libpng-dev</span><br></pre></td></tr></table></figure><h4 id="编写批处理程序"><a href="#编写批处理程序" class="headerlink" title="编写批处理程序"></a>编写批处理程序</h4><p>那么接下来，把执行apng2gif的过程变成批处理即可，这一步用shell或python都行，我用的是python（因为这段时间写了个千余行的shell脚本，现在不想写shell了）。</p><p>程序很简单，扫描所有后缀为.png的文件，调用apng2gif程序转换到gif文件夹下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trans</span>(<span class="params">filename</span>):</span></span><br><span class="line">    os.system(<span class="string">&quot;./apng2gif &quot;</span>+filename+<span class="string">&quot; gif/&quot;</span>+filename[:-<span class="number">4</span>]+<span class="string">&quot;.gif&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.png&#x27;</span>):</span><br><span class="line">            trans(filename)</span><br></pre></td></tr></table></figure><p>所以折腾了这么久，真正有效的代码量只有修改轮子1句c代码和批处理中的7句python代码（python代码甚至可以精简成三句！）？</p><p>其中<strong>解决问题</strong>的方式不一定难，但<strong>探索的过程</strong>一定艰难且有趣。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/107433842.gif" alt="107433842"></p><p><strong>保持好奇</strong>是探索发现的最大动力源泉。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/48859426.gif" alt="48859426"></p>]]></content>
      
      
      <categories>
          
          <category> 摸鱼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂事 </tag>
            
            <tag> apng </tag>
            
            <tag> apng2gif </tag>
            
            <tag> apng转gif </tag>
            
            <tag> 图片处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过GitHub搭建Hexo博客</title>
      <link href="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="为何使用Github"><a href="#为何使用Github" class="headerlink" title="为何使用Github"></a>为何使用Github</h3><ol><li>免费；</li><li>静态网页，不需要后台；</li><li>有版本管理；</li><li>代码也托管在Github上，不用整太多平台折腾；</li></ol><h3 id="为何使用Hexo"><a href="#为何使用Hexo" class="headerlink" title="为何使用Hexo"></a>为何使用Hexo</h3><ol><li>好看；</li><li>Markdown语法网页；</li><li>配置方便；</li><li>支持git；</li></ol><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>一台能上网的电脑；</li><li>脑子和手；</li></ol><h3 id="本文环境"><a href="#本文环境" class="headerlink" title="本文环境"></a>本文环境</h3><blockquote><p>Window 10 20H2 19042.572</p></blockquote><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><h3 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h3><p>进入<a href="https://github.com/" title="Github官网">Github官网</a>，点击右上角<strong>Sign up</strong>，后面随便点点就行。</p><p>如果有账号了，那就<strong>Sign in</strong>。</p><h3 id="新建Github-Pages仓库"><a href="#新建Github-Pages仓库" class="headerlink" title="新建Github Pages仓库"></a>新建Github Pages仓库</h3><p>点击<strong>Repositories</strong>，再点击<strong>New</strong></p><p><strong>Repository name</strong>设置为“<strong>你的用户名</strong>.github.io”，比如我的用户名是github-3rr0r，那我就需要设置为github-3rr0r.github.io。请注意，一定得这么设置，否则就无法成功生成Github Pages。</p><p>勾选“<strong>Public</strong>”，不然也无法成功。</p><p>其他的勾选不勾选无所谓，如下图所示。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/001.PNG" alt="001"></p><p>设置完成后跳转到如下界面：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/002.PNG" alt="002"></p><h3 id="安装Git客户端"><a href="#安装Git客户端" class="headerlink" title="安装Git客户端"></a>安装Git客户端</h3><p>前往<a href="https://git-scm.com/download/win" title="git-scm">git-scm</a>下载<strong>64-bit Git for Windows Setup</strong>，安装。</p><p>安装完成后打开Powershell，输入<code>git --version</code>验证是否安装成功。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/003.PNG" alt="003"></p><h3 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h3><h4 id="生成RSA密钥"><a href="#生成RSA密钥" class="headerlink" title="生成RSA密钥"></a>生成RSA密钥</h4><p>在Powershell中输入<code>ssh-keygen -t rsa -C &quot;你注册Github时用的邮件地址&quot;</code>。</p><p>第一个选项默认回车就行，后续输入生成密钥使用的字符串时，可以连续两次回车跳过，也可以自己输入，成功生成后结果如下：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/004.PNG" alt="004"></p><p>此时<code>.ssh</code>文件夹下会多出两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code>，分别为私钥文件和公钥文件。</p><p>用记事本打开<code>id_rsa.pub</code>文件，将其中内容全部复制。</p><h4 id="添加密钥到Github"><a href="#添加密钥到Github" class="headerlink" title="添加密钥到Github"></a>添加密钥到Github</h4><p>在Github中点击自己头像，然后点击<strong>Settings</strong>，跳转后点击<strong>SSH and GPG keys</strong>，再点击<strong>New SSH key</strong>。</p><p><strong>Title</strong>中填入好记的名字，用于辨识自己的哪台设备，<strong>Key</strong>中完整粘贴刚才复制的公钥文件内容，然后点击<strong>Add SSH key</strong>。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/005.PNG" alt="005"></p><p>完成后，<strong>SSH keys</strong>列表中将多出刚才添加密钥。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/006.PNG" alt="006"></p><p>接下来在Powershell中输入<code>ssh -T git@github.com</code>验证是否配置成功（此处命令不要修改）。</p><p>如果成功，将显示如下输出：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/007.PNG" alt="007"></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><h4 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h4><p>前往<a href="https://nodejs.org/zh-cn/" title="npm官网">npm官网</a>下载npm安装包，建议选择“长期支持版”。</p><p>除了设置安装路径以外，其他无脑下一步即可。</p><p>重新打开一个Powershell窗口（否则环境变量可能不会生效），输入<code>npm --version</code>验证是否安装成功。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/008.PNG" alt="008"></p><h4 id="通过npm安装Hexo"><a href="#通过npm安装Hexo" class="headerlink" title="通过npm安装Hexo"></a>通过npm安装Hexo</h4><p>安装好npm之后就可以安装Hexo了，命令为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo</span><br></pre></td></tr></table></figure><p>安装完成后，执行hexo的初始化命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init Hexo  <span class="comment"># 新建文件夹Hexo，并在该文件夹下初始化hexo</span></span><br></pre></td></tr></table></figure><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/009.PNG" alt="009"></p><p>初始化时会下载一些文件，等待完成即可。这一步可能会因为网络原因卡住不动，删除文件夹后重试或者换个网络试试，实在不行那你就试试魔法。</p><p>完成初始化后，进入文件夹，可以通过<code>hexo --help</code>或<code>hexo h</code>来查看帮助，我们主要用到的三条指令如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g          <span class="comment"># 等价于hexo generate，用于生成静态网页文件</span></span><br><span class="line">hexo s          <span class="comment"># 等价于hexo server，启动本地的服务器，可以在本地预览博客</span></span><br><span class="line">hexo d          <span class="comment"># 等价于hexo deploy，配合Github用于部署生成的静态网页</span></span><br></pre></td></tr></table></figure><p>输入<code>hexo s</code>启动本地服务器，在浏览器输入<a href="http://localhost:4000/">http://localhost:4000</a>预览初始的博客，如果弹出防火墙提示，勾选并允许即可。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/010.PNG" alt="010"></p><p>浏览器中显示的结果如下：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/011.PNG" alt="011"></p><h3 id="部署博客到Github"><a href="#部署博客到Github" class="headerlink" title="部署博客到Github"></a>部署博客到Github</h3><h4 id="修改Hexo配置文件"><a href="#修改Hexo配置文件" class="headerlink" title="修改Hexo配置文件"></a>修改Hexo配置文件</h4><p>初始化hexo的文件夹下，<code>_config.yml</code>就是hexo的配置文件，可以通过任意文本编辑器打开，推荐使用Visual Studio Code。</p><p>开始的<strong>Site</strong>部分可以配置网站信息（包括语言），我的配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">3rr0r&#x27;s</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&quot;3rr0r&#x27;s Blog on Github&quot;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">3rr0r</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Github-3rr0r</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>URL</strong>部分修改url为自己的网址即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://github-3rr0r.github.io/</span></span><br></pre></td></tr></table></figure><p>前面两部分的设置不影响部署到Github，将配置文件拉到底，最后的<strong>Deployment</strong>部分才是重点。我修改后的配置如下（请注意我的主分支已经从master改成了main，如果未改动过则为默认的master）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:github-3rr0r/github-3rr0r.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>修改完成后保存即可。</p><h4 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h4><p>在Powershell中输入以下指令生成静态网页：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>成功的输出如下：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/012.PNG" alt="012"></p><p>部署到Github上：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>此时会出现以下错误：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/013.PNG" alt="013"></p><p>这是因为没有安装相关的插件，输入以下命令安装即可：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer</span><span class="literal">-git</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>完成后重新输入<code>hexo d</code>部署即可，成功部署输出如下：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/014.PNG" alt="014"></p><p>此时可以看到Github上该仓库已经上传了一些文件：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/015.PNG" alt="015"></p><p>但因为我的仓库主分支是main而不是master，所以需要对这个仓库做个设置才能使Github Pages生效。</p><p>进入仓库的<strong>Settings</strong>，将分支切换为<strong>main</strong>，点击<strong>Save</strong>。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/016.PNG" alt="016"></p><p>现在可以看到如下界面：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/017.PNG" alt="017"></p><p>但是点击这个链接进去，依然是巨大的<strong>404</strong>：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/018.PNG" alt="018"></p><p>经过排查发现找不到问题（可能是网络相关问题）？</p><p>那就稍微修改点啥，然后重新生成部署。</p><p>比如把<strong>author</strong>从<strong>Github-3rr0r</strong>修改为<strong>3rr0r</strong>，然后执行<code>hexo clean</code>清理生成的静态文件，之后重新生成文件并部署，刷新网页成功看到部署到Github上的博客主页：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/019.PNG" alt="019"></p><p>与本地看到的是一致的，部署成功。</p><p>到这里搭建就已经完成啦，下面开始添加第一篇博文！</p><h2 id="新建并发布博文"><a href="#新建并发布博文" class="headerlink" title="新建并发布博文"></a>新建并发布博文</h2><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>这一步可以方便图片管理，在配置文件<code>_config.yml</code>中的<strong>Writing</strong>部分找到<strong>post_asset_folder</strong>项，将false修改为true：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span>  <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>现在新建博文的时候，就会同时也生成一个同名文件夹。</p><h3 id="新建博文"><a href="#新建博文" class="headerlink" title="新建博文"></a>新建博文</h3><p>以本文为例，在Powershell中输入如下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 通过GitHub搭建Hexo博客</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/020.PNG" alt="020"></p><p>现在可以看到**_posts**文件夹下多出了一个Markdown文件和一个文件夹，在文件中存放图片等资源文件即可，然后再md文件中使用相对路径引用资源。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/021.PNG" alt="021"></p><p>md文件中会默认生成文章相关信息，可以自行修改。在其后按照Markdown格式写作即可，支持代码等一些特殊格式，用起来很方便。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/022.PNG" alt="022"></p><p>推荐的Markdown编辑器是<strong>Typora</strong>。</p><p>编辑完成后，就可以使用输入<code>hexo g</code>和<code>hexo s</code>在本地预览了。</p><h3 id="上传博文"><a href="#上传博文" class="headerlink" title="上传博文"></a>上传博文</h3><p>确定无误后，输入<code>hexo d</code>就可以将新博文部署到Github上了。</p><p>效果如下：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/023.PNG" alt="023"></p><p>但是存在两个问题，一是图片不能显示，二是首页就展示了整片博文。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/024.PNG" alt="024"></p><h3 id="图片不能正常显示问题的解决"><a href="#图片不能正常显示问题的解决" class="headerlink" title="图片不能正常显示问题的解决"></a>图片不能正常显示问题的解决</h3><p>对于第一个问题，需要下载一个插件来解决：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-asset</span><span class="literal">-image</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>但是这个插件有问题，首页显示的博文依然不显示图片，这需要对该插件进行修改。</p><p>找了一些资料，并没有人给出可用的解决方案，只能自己排查了，最后确定修改方案如下。</p><p>在<code>node_modules\hexo-asset-image</code>中找到该插件，打开<code>index.js</code>文件，找到下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="regexp">/.*\/index\.html$/</span>.test(link)) &#123;</span><br><span class="line">   <span class="comment">// when permalink is end with index.html, for example 2019/02/20/xxtitle/index.html</span></span><br><span class="line">   <span class="comment">// image in xxtitle/ will go to xxtitle/index/</span></span><br><span class="line">   appendLink = <span class="string">&#x27;index/&#x27;</span>;</span><br><span class="line">   <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>将<code>else</code>语句块中的<code>var endPos = link.lastIndexOf(&#39;.&#39;);</code>修改为<code>var endPos = link.lastIndexOf(&#39;/&#39;);</code>。也就是把点改成了斜杠。</p><p>重新<code>hexo clean</code>、<code>hexo g</code>、<code>hexo d</code>三连，就可以看到图片能够正常显示了。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/025.PNG" alt="025"></p><h3 id="不让博文完整显示"><a href="#不让博文完整显示" class="headerlink" title="不让博文完整显示"></a>不让博文完整显示</h3><p>通过在markdown中插入以下标签可以解决问题：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/026.PNG" alt="026"></p><h3 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h3><p>关于主题就不多说了，个人比较喜欢NexT主题，一些配置也非常人性化，大家可以自己探索。</p>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> Blog搭建 </tag>
            
            <tag> Github Pages </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
