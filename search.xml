<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CS61A——环境（含HW-02全）</title>
      <link href="/2022/01/06/CS61A-05-Environments/"/>
      <url>/2022/01/06/CS61A-05-Environments/</url>
      
        <content type="html"><![CDATA[<h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ol><li>多环境；</li><li>高阶函数的环境；</li><li>局部命名；</li><li>函数组合；</li><li>自引用函数；</li><li>柯里化（Currying）；</li></ol><h2 id="多环境"><a href="#多环境" class="headerlink" title="多环境"></a>多环境</h2><h3 id="函数的生命周期"><a href="#函数的生命周期" class="headerlink" title="函数的生命周期"></a>函数的生命周期</h3><ol><li><p><code>def</code>语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br></pre></td></tr></table></figure><ol><li>创建了一个新的函数；</li><li>命名在当前帧绑定到函数上；</li></ol></li><li><p>调用表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">square(<span class="number">2</span> + <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ol><li>求操作符和操作数的值；</li><li>在参数（操作数的值）上调用函数（操作符的值）；</li></ol></li><li><p>调用/应用（Calling/applying）</p><ol><li>创建一个新的帧；</li><li>实参（parameter）绑定到形参（argument）上；</li><li>函数体在新的环境中执行；</li></ol></li></ol><h3 id="嵌套的调用表达式（多环境）"><a href="#嵌套的调用表达式（多环境）" class="headerlink" title="嵌套的调用表达式（多环境）"></a>嵌套的调用表达式（多环境）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line">square(square(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><img src="/2022/01/06/CS61A-05-Environments/image-20220106132237027.png" alt="image-20220106132237027" style="zoom:50%;"><p>一个环境由一个帧序列组成：</p><ol><li>环境（绿色）：全局帧；</li><li>环境（蓝色）：局部帧（f1），然后全局帧；</li><li>环境（紫色）：局部帧（f2），然后全局帧；</li></ol><p>脱离环境谈命名是没有意义的，每个表达式都在一个环境的上下文中求值。</p><p>命名求值为  找到该命名的  当前环境的  最早帧中绑定到该名称  的  值。</p><h3 id="不同环境中命名有不同的意义"><a href="#不同环境中命名有不同的意义" class="headerlink" title="不同环境中命名有不同的意义"></a>不同环境中命名有不同的意义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">square</span>):</span></span><br><span class="line">    <span class="keyword">return</span> square * square</span><br><span class="line"></span><br><span class="line">square(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>在全局环境中，<code>square</code>绑定为函数，在局部环境中，<code>square</code>绑定为局部变量。</p><h2 id="高阶函数的环境"><a href="#高阶函数的环境" class="headerlink" title="高阶函数的环境"></a>高阶函数的环境</h2><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>高阶函数是：</p><ol><li>以函数为形参的函数；</li><li>或返回值为函数的函数；</li></ol><p>函数是第一等级（first class）：函数在Python中是值（value）。</p><h4 id="note"><a href="#note" class="headerlink" title="note"></a>note</h4><blockquote><p>在函数式语言中，可以对函数像值或对象实例一样进行绑定在变量上或者作为参数来传递的操作。</p></blockquote><p>第一等级满足的特征：</p><ol><li>可以存放在变量和数据结构中；</li><li>可以当做参数传递给子过程；</li><li>可以当做子过程的返回值；</li><li>可以在运行期间被创建。</li></ol><h3 id="一个应用两次函数的例子"><a href="#一个应用两次函数的例子" class="headerlink" title="一个应用两次函数的例子"></a>一个应用两次函数的例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_twice</span>(<span class="params">f, x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> f(f(x))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">apply_twice(square, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>参数绑定到了函数上：</p><p><img src="/2022/01/06/CS61A-05-Environments/image-20220106134011321.png" alt="image-20220106134011321"></p><h2 id="嵌套定义的环境"><a href="#嵌套定义的环境" class="headerlink" title="嵌套定义的环境"></a>嵌套定义的环境</h2><h3 id="一个嵌套定义函数并返回函数的例子"><a href="#一个嵌套定义函数并返回函数的例子" class="headerlink" title="一个嵌套定义函数并返回函数的例子"></a>一个嵌套定义函数并返回函数的例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_texter</span>(<span class="params">emoji</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">texter</span>(<span class="params">text</span>):</span></span><br><span class="line">        <span class="keyword">return</span> emoji + text + emoji</span><br><span class="line">    <span class="keyword">return</span> texter</span><br><span class="line"></span><br><span class="line">happy_text = make_texter(<span class="string">&quot;😄&quot;</span>)</span><br><span class="line">result = happy_text(<span class="string">&quot;lets go to the beach!&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2022/01/06/CS61A-05-Environments/image-20220106134352867.png" alt="image-20220106134352867"></p><ol><li>每个用户定义的函数都有个父帧；</li><li>函数的父帧是其定义所在的帧；</li><li>每个局部帧都有个父帧；</li><li>帧的父帧是其相应的被调用函数的父帧；</li><li>环境是帧的序列。</li></ol><h3 id="如何绘制环境图"><a href="#如何绘制环境图" class="headerlink" title="如何绘制环境图"></a>如何绘制环境图</h3><h4 id="定义函数时"><a href="#定义函数时" class="headerlink" title="定义函数时"></a>定义函数时</h4><ol><li><p>创建一个函数变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func &lt;name&gt;(&lt;formal parameters&gt;) [parent=&lt;label&gt;]</span><br></pre></td></tr></table></figure></li><li><p>它的父帧为当前帧；</p></li><li><p>绑定<code>&lt;name&gt;</code>到当前帧的函数值；</p></li></ol><h4 id="调用函数时"><a href="#调用函数时" class="headerlink" title="调用函数时"></a>调用函数时</h4><ol><li>添加一个局部帧，标题为被调用的函数的<code>&lt;name&gt;</code>；</li><li>复制函数的父帧到局部帧：<code>[parent=&lt;label&gt;]</code>；</li><li>绑定<code>&lt;formal parameters&gt;</code>到局部帧的实参；</li><li>在以局部帧为开始的环境中执行函数体。</li></ol><h2 id="局部命名"><a href="#局部命名" class="headerlink" title="局部命名"></a>局部命名</h2><h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thingy</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> bobber(y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bobber</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + y</span><br><span class="line"></span><br><span class="line">result = thingy(<span class="string">&quot;ma&quot;</span>, <span class="string">&quot;jig&quot;</span>)</span><br></pre></td></tr></table></figure><p>这个例子会报错，<code>bobber</code>中<code>y</code>未定义的<code>NameError</code></p><h3 id="局部命名可见性"><a href="#局部命名可见性" class="headerlink" title="局部命名可见性"></a>局部命名可见性</h3><p>局部命名对于其他非嵌套的函数不可见。</p><p>调用一个顶级函数会创建一个环境，这个环境包括一个局部帧后面跟着全局帧。</p><p><img src="/2022/01/06/CS61A-05-Environments/image-20220106135729306.png" alt="image-20220106135729306"></p><h2 id="函数组合"><a href="#函数组合" class="headerlink" title="函数组合"></a>函数组合</h2><h3 id="一个函数组合器的例子"><a href="#一个函数组合器的例子" class="headerlink" title="一个函数组合器的例子"></a>一个函数组合器的例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">happy</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;☻&quot;</span> + text + <span class="string">&quot;☻&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sad</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;☹&quot;</span> + text + <span class="string">&quot;☹&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">composer</span>(<span class="params">f, g</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">composed</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> f(g(x))</span><br><span class="line">    <span class="keyword">return</span> composed</span><br><span class="line"></span><br><span class="line">msg1 = composer(sad, happy)(<span class="string">&quot;cs61a!&quot;</span>)</span><br><span class="line">msg2 = composer(happy, sad)(<span class="string">&quot;eecs16a!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="另一个函数组合器的例子"><a href="#另一个函数组合器的例子" class="headerlink" title="另一个函数组合器的例子"></a>另一个函数组合器的例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">happy</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;☻&quot;</span> + text + <span class="string">&quot;☻&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sad</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;☹&quot;</span> + text + <span class="string">&quot;☹&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_texter</span>(<span class="params">emoji</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">texter</span>(<span class="params">text</span>):</span></span><br><span class="line">        <span class="keyword">return</span> emoji + text + emoji</span><br><span class="line">    <span class="keyword">return</span> texter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">composer</span>(<span class="params">f, g</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">composed</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> f(g(x))</span><br><span class="line">    <span class="keyword">return</span> composed</span><br><span class="line"></span><br><span class="line">composer(happy, make_texter(<span class="string">&quot;☃︎&quot;</span>))(<span class="string">&#x27;snow day!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>被组合的函数之一可能是个高阶函数。</p><p><img src="/2022/01/06/CS61A-05-Environments/image-20220106140502775.png" alt="image-20220106140502775"></p><h2 id="自引用"><a href="#自引用" class="headerlink" title="自引用"></a>自引用</h2><h3 id="一个自引用的函数"><a href="#一个自引用的函数" class="headerlink" title="一个自引用的函数"></a>一个自引用的函数</h3><p>高阶函数可以返回一个引用它自身命名的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_sums</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_sum</span>(<span class="params">k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> print_sums(n + k)</span><br><span class="line">    <span class="keyword">return</span> next_sum</span><br><span class="line"></span><br><span class="line">print_sums(<span class="number">1</span>)(<span class="number">3</span>)(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">&lt;function print_sums.&lt;<span class="built_in">locals</span>&gt;.next_sum at <span class="number">0x0000019AA5581CA0</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="print-sums的环境"><a href="#print-sums的环境" class="headerlink" title="print_sums的环境"></a><code>print_sums</code>的环境</h3><p><img src="/2022/01/06/CS61A-05-Environments/image-20220106140938332.png" alt="image-20220106140938332"></p><h3 id="理解print-sums"><a href="#理解print-sums" class="headerlink" title="理解print_sums"></a>理解<code>print_sums</code></h3><p>调用为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_sums(<span class="number">1</span>)(<span class="number">3</span>)(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g1 = print_sums(<span class="number">1</span>)</span><br><span class="line">g2 = g1(<span class="number">3</span>)</span><br><span class="line">g2(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>调用<code>print_sums(x)</code>会返回一个函数：</p><ol><li>副作用是打印<code>x</code>；</li><li>返回一个函数，这个函数输入是参数<code>x+y</code>，但这个函数做的事和<code>print_sums()</code>一样；</li></ol><p>所以过程为：</p><ol><li>打印<code>1</code>，返回<code>g1</code>；</li><li>调用<code>g1</code>打印4，返回<code>g2</code>；</li><li>调用<code>g2</code>打印9，返回另一个函数；</li></ol><h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><h3 id="add-vs-make-adder"><a href="#add-vs-make-adder" class="headerlink" title="add vs. make_adder"></a><code>add</code> vs. <code>make_adder</code></h3><p>比较：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_adder</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: n + x</span><br><span class="line"></span><br><span class="line">make_adder(<span class="number">2</span>)(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>前者后者是什么关系呢？</p><p>前者直接调用了一个函数，输入是两个操作数；</p><p>后者调用的函数返回了一个加法函数，输入是另一个数。</p><h3 id="函数柯里化（Currying）"><a href="#函数柯里化（Currying）" class="headerlink" title="函数柯里化（Currying）"></a>函数柯里化（Currying）</h3><p><strong>柯里化</strong>：把一个多参数的函数转换为单参数的高阶函数。</p><p>一个将任意二参数函数柯里化的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">curry2</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">y</span>):</span></span><br><span class="line">            <span class="keyword">return</span> f(x, y)</span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make_adder = curry2(add)</span><br><span class="line">make_adder(<span class="number">2</span>)(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>另一个定义方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curry2 = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: <span class="keyword">lambda</span> y: f(x, y)</span><br></pre></td></tr></table></figure><h3 id="为什么柯里化？"><a href="#为什么柯里化？" class="headerlink" title="为什么柯里化？"></a>为什么柯里化？</h3><p>以美国逻辑学家 Haskell Curry 的名字命名，但实际上首先由俄罗斯人Moses Schönfinkel基于德国人Gottlob Frege提出的原则发表。（在1980发表的一篇文章中，他提出了Stigler定律——科学规律往往都不是以原创者的名字命名的，而是以后来更有名望的学者的名字加以命名。<a href="https://en.wikipedia.org/wiki/Stigler's_law_of_eponymy">Stigler’s law of eponymy - Wikipedia</a>）</p><p>有些分析手段只能处理单参数的函数，柯里化之后就可以应用这些手段了。</p><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><h3 id="Product"><a href="#Product" class="headerlink" title="Product"></a>Product</h3><p>课上学的<code>summation(n, term)</code>函数实现了<code>term(x)</code>的累加，现在要求写个类似的累乘：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span>(<span class="params">n, term</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the product of the first n terms in a sequence.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    n: a positive integer</span></span><br><span class="line"><span class="string">    term:  a function that takes one argument to produce the term</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, identity)  # 1 * 2 * 3</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(5, identity)  # 1 * 2 * 3 * 4 * 5</span></span><br><span class="line"><span class="string">    120</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, square)    # 1^2 * 2^2 * 3^2</span></span><br><span class="line"><span class="string">    36</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(5, square)    # 1^2 * 2^2 * 3^2 * 4^2 * 5^2</span></span><br><span class="line"><span class="string">    14400</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, increment) # (1+1) * (2+1) * (3+1)</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, triple)    # 1*3 * 2*3 * 3*3</span></span><br><span class="line"><span class="string">    162</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>很简单，一个循环就行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span>(<span class="params">n, term</span>):</span></span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        result = result * term(k)</span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="Accumulate"><a href="#Accumulate" class="headerlink" title="Accumulate"></a>Accumulate</h3><p>现在向把<code>summation</code>和<code>product</code>一般化，把累加和累成一般化为<code>accumulate</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accumulate</span>(<span class="params">merger, base, n, term</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the result of merging the first n terms in a sequence and base.</span></span><br><span class="line"><span class="string">    The terms to be merged are term(1), term(2), ..., term(n). merger is a</span></span><br><span class="line"><span class="string">    two-argument commutative function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5</span></span><br><span class="line"><span class="string">    26</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 11, 0, identity) # 11</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2</span></span><br><span class="line"><span class="string">    25</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(mul, 2, 3, square)    # 2 * 1^2 * 2^2 * 3^2</span></span><br><span class="line"><span class="string">    72</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # 2 + (1^2 + 1) + (2^2 + 1) + (3^2 + 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(lambda x, y: x + y + 1, 2, 3, square)</span></span><br><span class="line"><span class="string">    19</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ((2 * 1^2 * 2) * 2^2 * 2) * 3^2 * 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(lambda x, y: 2 * x * y, 2, 3, square)</span></span><br><span class="line"><span class="string">    576</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(lambda x, y: (x + y) % 17, 19, 20, square)</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summation_using_accumulate</span>(<span class="params">n, term</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the sum: term(1) + ... + term(n), using accumulate.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation_using_accumulate(5, square)</span></span><br><span class="line"><span class="string">    55</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation_using_accumulate(5, triple)</span></span><br><span class="line"><span class="string">    45</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product_using_accumulate</span>(<span class="params">n, term</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the product: term(1) * ... * term(n), using accumulate.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product_using_accumulate(4, square)</span></span><br><span class="line"><span class="string">    576</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product_using_accumulate(6, triple)</span></span><br><span class="line"><span class="string">    524880</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>还是很容易啊，就把参数作为运算和基数就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accumulate</span>(<span class="params">merger, base, n, term</span>):</span></span><br><span class="line">    result = base</span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        result = merger(result, term(k))</span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summation_using_accumulate</span>(<span class="params">n, term</span>):</span></span><br><span class="line">    <span class="keyword">return</span> accumulate(add, <span class="number">0</span>, n, term)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product_using_accumulate</span>(<span class="params">n, term</span>):</span></span><br><span class="line">    <span class="keyword">return</span> accumulate(mul, <span class="number">1</span>, n, term)</span><br></pre></td></tr></table></figure><h3 id="Church-numerals（附加题，Just-for-fun）"><a href="#Church-numerals（附加题，Just-for-fun）" class="headerlink" title="Church numerals（附加题，Just for fun）"></a>Church numerals（附加题，Just for fun）</h3><p>一个叫Alonzo Church的逻辑学家发明了一种完全使用函数表示非负整数的系统，目的是为了说明函数足以描述所有的数论：如果我们有函数，我们就不需要假设数字存在，而可以发明数字。</p><p>题目让重新发现这个Church numerals的表示法。</p><p><code>0</code>的定义和一个返回比其参数多一的函数定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zero</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">successor</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(n(f)(x))</span><br></pre></td></tr></table></figure><p>要求：</p><ol><li>定义<code>1</code>和<code>2</code>，他们的行为分别和<code>successor(zero)</code>、<code>successor(successor(zero))</code>是一样的但别直接调用<code>successor</code>；</li><li>实现一个函数<code>church_to_int</code>把一个Church数变成一个常规的Python整数；</li><li>实现函数<code>add_church</code>、<code>mul_church</code>和<code>pow_church</code>，分别执行church数上得加法、乘法和指数运算。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Church numeral 1: same as successor(zero)&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Church numeral 2: same as successor(successor(zero))&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line"></span><br><span class="line">three = successor(two)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">church_to_int</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Convert the Church numeral n to a Python integer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(zero)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(one)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(two)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(three)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_church</span>(<span class="params">m, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the Church numeral for m + n, for Church numerals m and n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(add_church(two, three))</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul_church</span>(<span class="params">m, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the Church numeral for m * n, for Church numerals m and n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; four = successor(three)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(mul_church(two, three))</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(mul_church(three, four))</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow_church</span>(<span class="params">m, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the Church numeral m ** n, for Church numerals m and n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(pow_church(two, three))</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(pow_church(three, two))</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>首先分析这个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zero</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x</span><br></pre></td></tr></table></figure><p>就返回一个函数，这个函数输入是自己，返回值也是自己。</p><p>然后再分析这个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">successor</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(n(f)(x))</span><br></pre></td></tr></table></figure><p>输入是<code>n</code>，返回一个lambda函数，这个lambda函数输入是<code>f</code>，返回值也是一个lambda表达式，这个表达式输入是<code>x</code>，返回值是<code>f(n(f)(x))</code>。</p><p>那我们写出<code>successor(zero)</code>，返回值是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(zero(f)(x))</span><br></pre></td></tr></table></figure><p><code>zero(f)(x)</code>就等价于<code>x</code>，所以上面的等价于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(x)</span><br></pre></td></tr></table></figure><p>这是个lambda函数，参数值为<code>f</code>，返回值为<code>lambda x: f(x)</code>，因此<code>one(f)</code>定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(x)</span><br></pre></td></tr></table></figure><p>同理，<code>successor(one)</code>就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(one(f)(x))</span><br></pre></td></tr></table></figure><p>即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f((x))</span><br></pre></td></tr></table></figure><p>所以同理，<code>two(f)</code>定义为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(f(x))</span><br></pre></td></tr></table></figure><p>那其实已经很明显了，数字几就等价于church数的几层嵌套函数。</p><p>那把church数变成整数的思路就有了，每次嵌套调用的时候加一就行，对于church数<code>n</code>，给他的参数就是<code>f</code>，我们给一个匿名加一的函数<code>lambda x: x + 1</code>，嵌套到最里层，函数的输入是<code>0</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">church_to_int</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n(<span class="keyword">lambda</span> x: x + <span class="number">1</span>)(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>用嵌套的思路来理解，那么加法就是进一步嵌套：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_church</span>(<span class="params">m, n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: m(f)(n(f)(x))</span><br></pre></td></tr></table></figure><p>乘法就是俄罗斯套娃，把<code>n(f)</code>作为新的<code>f</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul_church</span>(<span class="params">m, n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> f: m(n(f))</span><br></pre></td></tr></table></figure><p>指数运算我也没想出来有什么优美的方式，直到看到了别人给的答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow_church</span>(<span class="params">m, n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n(m)</span><br></pre></td></tr></table></figure><p><code>n(f)</code>可以理解为嵌套了<code>n</code>次<code>f</code>，也就是<code>f(f(...f(...)))</code>。</p><p>那么<code>n(f)(x)</code>就是<code>f(f(...f(...)))</code>，所以<code>m(f)(n(f)(x))</code>就是<code>f(f(...f(n(f)(x))))</code>，也就是嵌套了<code>m + n</code>层。</p><p>那么<code>m(n(f))</code>就是<code>n(f)(n(f)...n(f)(...))</code>，展开就是<code>m * n</code>层。</p><p>所以！<code>n(m)</code>就是<code>m(m(m...m(f)))</code>展开就是<code>m * m * ... * m</code>层，即m的n次方，妙啊！</p>]]></content>
      
      
      <categories>
          
          <category> UC Berkeley EECS </category>
          
          <category> UC Berkeley EECS CS61A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS61A </tag>
            
            <tag> UC Berkeley </tag>
            
            <tag> The Structure and Interpretation of Computer Programs </tag>
            
            <tag> 入门级别课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS61A——高阶函数</title>
      <link href="/2022/01/05/CS61A-04-High-Order-Functions/"/>
      <url>/2022/01/05/CS61A-04-High-Order-Functions/</url>
      
        <content type="html"><![CDATA[<h2 id="纲要"><a href="#纲要" class="headerlink" title="纲要"></a>纲要</h2><ol><li>迭代例子</li><li>设计函数</li><li>一般化</li><li>高阶函数</li><li>lambda表达式</li><li>条件表达式</li></ol><h2 id="迭代例子"><a href="#迭代例子" class="headerlink" title="迭代例子"></a>迭代例子</h2><h3 id="维拉汉卡-斐波那契数字"><a href="#维拉汉卡-斐波那契数字" class="headerlink" title="维拉汉卡-斐波那契数字"></a>维拉汉卡-斐波那契数字</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0  1  1  2  3  5  8  13  21  34</span><br></pre></td></tr></table></figure><p>从第三个数开始，每个数都等于前两项的和。</p><h3 id="维拉汉卡问题"><a href="#维拉汉卡问题" class="headerlink" title="维拉汉卡问题"></a>维拉汉卡问题</h3><p>对于一个总时长有多少种节奏存在？</p><p>S表示短音节，L表示长音节，一个长音节等于两个短音节。</p><table><thead><tr><th>时长</th><th>Meters</th><th>总可能性</th></tr></thead><tbody><tr><td>1</td><td>S</td><td>1</td></tr><tr><td>2</td><td>SS，L</td><td>2</td></tr><tr><td>3</td><td>SSS，SL，LS</td><td>3</td></tr><tr><td>4</td><td>SSSS，SSL，SLS，LSS，LL</td><td>5</td></tr><tr><td>5</td><td>SSSSS，SSSL，SSLS，SLSS，SLL，LLS，LSL，LSSS</td><td>8</td></tr></tbody></table><h3 id="斐波那契问题"><a href="#斐波那契问题" class="headerlink" title="斐波那契问题"></a>斐波那契问题</h3><p>一对兔子每个月可以生一对兔子，N个月后有多少对兔子？</p><h3 id="维拉汉卡-斐波那契数字生成"><a href="#维拉汉卡-斐波那契数字生成" class="headerlink" title="维拉汉卡-斐波那契数字生成"></a>维拉汉卡-斐波那契数字生成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vf_number</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the nth Virahanka-Fibonacci number, for N &gt;= 1.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; vf_number(2)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; vf_number(6)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span> </span><br><span class="line">    prev = <span class="number">0</span>  <span class="comment"># First Fibonacci number</span></span><br><span class="line">    curr = <span class="number">1</span>  <span class="comment"># Second Fibonacci number</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt; n: </span><br><span class="line">        (prev, curr) = (curr, prev + curr)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> curr</span><br></pre></td></tr></table></figure><p>这里用了个循环来解决。</p><h3 id="黄金螺旋"><a href="#黄金螺旋" class="headerlink" title="黄金螺旋"></a>黄金螺旋</h3><p><img src="/2022/01/05/CS61A-04-High-Order-Functions/image-20220105005019911-16413150219371.png" alt="image-20220105005019911"></p><p>黄金螺旋也可以近似看做维拉汉卡-斐波那契数列。</p><p>据说熊身上都有黄金螺旋，多少有点强行了。</p><img src="/2022/01/05/CS61A-04-High-Order-Functions/image-20220105005210508.png" alt="image-20220105005210508" style="zoom: 33%;"><h2 id="设计函数"><a href="#设计函数" class="headerlink" title="设计函数"></a>设计函数</h2><h3 id="描述函数"><a href="#描述函数" class="headerlink" title="描述函数"></a>描述函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the square of x.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br></pre></td></tr></table></figure><table><thead><tr><th>Aspects</th><th>Examples</th></tr></thead><tbody><tr><td>一个函数的<strong>域</strong>（domain）是通过参数得到的所有输入的集合</td><td><code>x</code>是一个数</td></tr><tr><td>一个函数的<strong>范围</strong>（range）是其返回的输出的值的集合</td><td><code>square</code>返回一个非负实数</td></tr><tr><td>一个纯函数的<strong>行为</strong>（behavior）</td><td><code>square</code>返回<code>x</code>的平方</td></tr></tbody></table><h3 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h3><p>只给一个函数一个工作，但让其适应很多相关情形：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">round</span>(<span class="number">1.23</span>)     <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">round</span>(<span class="number">1.23</span>, <span class="number">0</span>)  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">round</span>(<span class="number">1.23</span>, <span class="number">1</span>)  <span class="comment"># 1.2</span></span><br><span class="line"><span class="built_in">round</span>(<span class="number">1.23</span>, <span class="number">5</span>)  <span class="comment"># 1.23</span></span><br></pre></td></tr></table></figure><p><strong>别自己重复</strong>（DRY，<strong>Don’t Repeat Yourself</strong>）：只实现一个过程，执行很多次。</p><h2 id="一般化"><a href="#一般化" class="headerlink" title="一般化"></a>一般化</h2><h3 id="通过参数一般化模式"><a href="#通过参数一般化模式" class="headerlink" title="通过参数一般化模式"></a>通过参数一般化模式</h3><p>几何形状有相似的面积公式：</p><p><img src="/2022/01/05/CS61A-04-High-Order-Functions/image-20220105010215638.png" alt="image-20220105010215638"></p><h3 id="一个非一般化的方法"><a href="#一个非一般化的方法" class="headerlink" title="一个非一般化的方法"></a>一个非一般化的方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi, sqrt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_square</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> r * r</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_circle</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> r * r * pi</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_hexagon</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> r * r * (<span class="number">3</span> * sqrt(<span class="number">3</span>) / <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>怎么一般化共同结构呢？</p><h3 id="一般化的面积函数"><a href="#一般化的面积函数" class="headerlink" title="一般化的面积函数"></a>一般化的面积函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi, sqrt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">r, shape_constant</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the area of a shape from length measurement R.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> r &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> r * r * shape_constant</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_square</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_circle</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, pi)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area_hexagon</span>(<span class="params">r</span>):</span></span><br><span class="line">    <span class="keyword">return</span> area(r, <span class="number">3</span> * sqrt(<span class="number">3</span>) / <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><h3 id="什么是高阶函数"><a href="#什么是高阶函数" class="headerlink" title="什么是高阶函数"></a>什么是高阶函数</h3><p>满足两者之一的函数都是高阶方程：</p><ol><li>以其他函数为参数；</li><li>返回一个函数作为它的结果；</li></ol><p>其他函数都认为是一阶方程。</p><h3 id="计算过程上的一般化"><a href="#计算过程上的一般化" class="headerlink" title="计算过程上的一般化"></a>计算过程上的一般化</h3><p>函数间的共同结构可能是一个计算过程，而不止是一个数，比如：</p><p><img src="/2022/01/05/CS61A-04-High-Order-Functions/image-20220105010805023.png" alt="image-20220105010805023"></p><h3 id="函数作为参数"><a href="#函数作为参数" class="headerlink" title="函数作为参数"></a>函数作为参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cube</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> k ** <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summation</span>(<span class="params">n, term</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum the first N terms of a sequence.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation(5, cube)</span></span><br><span class="line"><span class="string">    225</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total = total + term(k)</span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><h2 id="函数作为返回值"><a href="#函数作为返回值" class="headerlink" title="函数作为返回值"></a>函数作为返回值</h2><h3 id="局部定义的函数"><a href="#局部定义的函数" class="headerlink" title="局部定义的函数"></a>局部定义的函数</h3><p>定义在其他函数体内的函数会绑定到局部帧的命名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_adder</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function that takes one argument k</span></span><br><span class="line"><span class="string">       and returns k + n.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = make_adder(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(4)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adder</span>(<span class="params">k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> k + n</span><br><span class="line">    <span class="keyword">return</span> adder</span><br></pre></td></tr></table></figure><h3 id="调用表达式作为操作符表达式"><a href="#调用表达式作为操作符表达式" class="headerlink" title="调用表达式作为操作符表达式"></a>调用表达式作为操作符表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make_adder(<span class="number">1</span>)(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><code>make_adder(1)</code>调用了函数，返回了一个函数又作为函数被调用。</p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><h3 id="lambda语法"><a href="#lambda语法" class="headerlink" title="lambda语法"></a>lambda语法</h3><p><strong>lambda表达式</strong>是一种简单的函数定义，计算结果是一个函数，语法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> &lt;parameters&gt;: &lt;expression&gt;</span><br></pre></td></tr></table></figure><p>返回的函数以<code>parameters</code>为输入并返回<code>expression</code>计算的值。</p><p>比如，lambda版本的<code>square</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">square = <span class="keyword">lambda</span> x: x * x</span><br></pre></td></tr></table></figure><p>会返回一个函数，以<code>x</code>为参数，返回<code>x * x</code>作为结果。</p><h3 id="Lambda语法提示"><a href="#Lambda语法提示" class="headerlink" title="Lambda语法提示"></a>Lambda语法提示</h3><p>lambda表达里面不应该包含return语句，如：</p><p>错误用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">square = <span class="keyword">lambda</span> x: <span class="keyword">return</span> x * x</span><br></pre></td></tr></table></figure><h3 id="def语句和lambda表达式对比"><a href="#def语句和lambda表达式对比" class="headerlink" title="def语句和lambda表达式对比"></a><code>def</code>语句和<code>lambda</code>表达式对比</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># def语句</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="comment"># lambda语句</span></span><br><span class="line">square = <span class="keyword">lambda</span> x: x * x</span><br></pre></td></tr></table></figure><p>共同点：</p><ol><li>都创建了一个函数，域、范围和行为都一样；</li><li>都把函数绑定到了<code>square</code>上；</li></ol><p>不同点：</p><p>只有<code>def</code>语句给了函数一个固有名称，可以在环境图中看到，但不影响执行，只在打印的时候有区别。</p><p><img src="/2022/01/05/CS61A-04-High-Order-Functions/image-20220105012645366.png" alt="image-20220105012645366"></p><h3 id="lambda作为参数"><a href="#lambda作为参数" class="headerlink" title="lambda作为参数"></a>lambda作为参数</h3><p>要把简单函数作为参数的时候用lambda表达式很方便：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原始方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cube</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="keyword">return</span> k ** <span class="number">3</span></span><br><span class="line"></span><br><span class="line">summation(<span class="number">5</span>, cube)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用lambda表达式</span></span><br><span class="line">summation(<span class="number">5</span>, <span class="keyword">lambda</span> k: k ** <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h2><h3 id="条件表达式-1"><a href="#条件表达式-1" class="headerlink" title="条件表达式"></a>条件表达式</h3><p>条件表达式格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;consequent&gt; <span class="keyword">if</span> &lt;predicate&gt; <span class="keyword">else</span> &lt;alternative&gt;</span><br></pre></td></tr></table></figure><p>规则是这样的：</p><ol><li>求<code>&lt;predicate&gt;</code>的值；</li><li>如果值为真，整个表达式的值为<code>&lt;consequent&gt;</code>;</li><li>否则，表达式的值为<code>&lt;alternative&gt;</code>。</li></ol><h3 id="有条件表达式的lambda语句"><a href="#有条件表达式的lambda语句" class="headerlink" title="有条件表达式的lambda语句"></a>有条件表达式的lambda语句</h3><p>错误语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x: <span class="keyword">if</span> x &gt; <span class="number">0</span>: x <span class="keyword">else</span>: <span class="number">0</span><span class="comment"># 不能有冒号</span></span><br></pre></td></tr></table></figure><p>正确语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x: x <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> UC Berkeley EECS </category>
          
          <category> UC Berkeley EECS CS61A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS61A </tag>
            
            <tag> UC Berkeley </tag>
            
            <tag> The Structure and Interpretation of Computer Programs </tag>
            
            <tag> 入门级别课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS61A——Labs（更新至Lab-01）</title>
      <link href="/2022/01/03/CS61A-Labs/"/>
      <url>/2022/01/03/CS61A-Labs/</url>
      
        <content type="html"><![CDATA[<h2 id="Lab-00"><a href="#Lab-00" class="headerlink" title="Lab-00"></a>Lab-00</h2><p>略</p><h2 id="Lab-01"><a href="#Lab-01" class="headerlink" title="Lab-01"></a>Lab-01</h2><h3 id="Falling-Factorial"><a href="#Falling-Factorial" class="headerlink" title="Falling Factorial"></a>Falling Factorial</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>写一个<code>falling</code>函数，输入是<code>n</code>和<code>k</code>，要求返回<code>k</code>个连续的值的乘积，这几个值从<code>n</code>开始往下递减，当<code>k</code>为0的时候，返回1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">falling</span>(<span class="params">n, k</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the falling factorial of n to depth k.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(6, 3)  # 6 * 5 * 4</span></span><br><span class="line"><span class="string">    120</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 3)  # 4 * 3 * 2</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 1)  # 4</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 0)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>很简单，先判断<code>k</code>为零的情况，然后用循环计算乘积。</p><h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">falling</span>(<span class="params">n, k</span>):</span></span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        prod = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> k &gt; <span class="number">0</span>:</span><br><span class="line">            prod *= n</span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> prod</span><br></pre></td></tr></table></figure><h3 id="Sum-Digits"><a href="#Sum-Digits" class="headerlink" title="Sum Digits"></a>Sum Digits</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>写一个函数，接受非负整数为输入，对它的各个位数求和。（提示可能需要使用整除和模运算）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits</span>(<span class="params">y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum all the digits of y.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(10) # 1 + 0 = 1</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(4224) # 4 + 2 + 2 + 4 = 12</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(1234567890)</span></span><br><span class="line"><span class="string">    45</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = sum_digits(123) # make sure that you are using return rather than print</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>要把每一位数提取出来，<code>n % 10</code>可以得到个位数，<code>n // 10</code>可以得到其他位数，也很简单。</p><h4 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_digits</span>(<span class="params">y</span>):</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> y != <span class="number">0</span>:</span><br><span class="line">        ans += y % <span class="number">10</span></span><br><span class="line">        y //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h4 id="Double-Eights"><a href="#Double-Eights" class="headerlink" title="Double Eights"></a>Double Eights</h4><p>写一个函数，输入是一个数，判断它的数字里面有没有两个相邻的8。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double_eights</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return true if n has two eights in a row.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(8)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(88)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(2882)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(880088)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(12345)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(80808080)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><p>就判断低两位是不是88，如果不是就整除10来右移，直到碰到88或位数不够2。</p><h4 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double_eights</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">while</span> n &gt;= <span class="number">88</span>:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">100</span> == <span class="number">88</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        n //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>这里<code>while n &gt;= 88</code>也可以是<code>while n &gt;= 0</code>，在判断的时候会更快，但可能会多计算两轮。</p>]]></content>
      
      
      <categories>
          
          <category> UC Berkeley EECS </category>
          
          <category> UC Berkeley EECS CS61A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS61A </tag>
            
            <tag> UC Berkeley </tag>
            
            <tag> The Structure and Interpretation of Computer Programs </tag>
            
            <tag> 入门级别课程 </tag>
            
            <tag> Labs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS61A——Lec-03-控制（含HW-01下）</title>
      <link href="/2022/01/03/CS61A-03-Control/"/>
      <url>/2022/01/03/CS61A-03-Control/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ol><li>副作用</li><li>更多的函数特性</li><li>条件语句</li><li>布尔值</li><li>迭代</li></ol><h2 id="副作用"><a href="#副作用" class="headerlink" title="副作用"></a>副作用</h2><h3 id="None值"><a href="#None值" class="headerlink" title="None值"></a><code>None</code>值</h3><p><code>None</code>这个值在Python中表示没有，任何一个不显式返回值的函数都会返回<code>None</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_it</span>(<span class="params">x</span>):</span></span><br><span class="line">  x * x</span><br></pre></td></tr></table></figure><p>调用返回<code>None</code>的函数时，控制台不会有输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">square_it(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>如果将<code>None</code>当成一个数来使用的话会导致错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sixteen = square_it(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">sum</span> = sixteen + <span class="number">4</span>     <span class="comment"># 🚫 TypeError!</span></span><br></pre></td></tr></table></figure><p>类型错误（TypeError）：</p><p><img src="/2022/01/03/CS61A-03-Control/image-20220102201925477.png" alt="image-20220102201925477"></p><h3 id="副作用-1"><a href="#副作用-1" class="headerlink" title="副作用"></a>副作用</h3><p>副作用指的是调用函数时，除了返回值以外发生的其他的事。</p><p>如果常见的调用<code>print()</code>函数时会在控制台输出字符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>类似的副作用还有向文件写内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;songs.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&quot;Dancing On My Own, Robyn&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="副作用-vs-返回值"><a href="#副作用-vs-返回值" class="headerlink" title="副作用 vs. 返回值"></a>副作用 vs. 返回值</h3><p>代码段1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_num1</span>(<span class="params">number</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(number, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>代码段2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_num2</span>(<span class="params">number</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(number ** <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>其中<code>square_num2()</code>函数有副作用，因为它输出了值，但返回值为<code>None</code>；<code>square_num1()</code>返回的是一个数。</p><p>其中，仅返回值的函数称为纯函数（Pure function），有副作用的函数称为非纯函数（Non-pure function）。</p><h3 id="嵌套print-语句"><a href="#嵌套print-语句" class="headerlink" title="嵌套print()语句"></a>嵌套<code>print()</code>语句</h3><p>一个嵌套的<code>print()</code>语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">print</span>(<span class="number">1</span>), <span class="built_in">print</span>(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p><img src="/2022/01/03/CS61A-03-Control/image-20220102203248591.png" alt="image-20220102203248591"></p><p>输出结果为：</p><img src="/2022/01/03/CS61A-03-Control/image-20220102203325345.png" alt="image-20220102203325345" style="zoom:50%;"><h2 id="更多的函数特性"><a href="#更多的函数特性" class="headerlink" title="更多的函数特性"></a>更多的函数特性</h2><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>在函数签名中，参数可以指定一个默认值，如果没传值那就使用默认值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_dog_age</span>(<span class="params">human_years, multiplier = <span class="number">7</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> human_years * multiplier</span><br></pre></td></tr></table></figure><p>这两个调用结果是一样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">calculate_dog_age(<span class="number">3</span>)</span><br><span class="line">calculate_dog_age(<span class="number">3</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>默认的参数可以用两种方式覆盖：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">calculate_dog_age(<span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line">calculate_dog_age(<span class="number">3</span>, multiplier=<span class="number">6</span>)</span><br></pre></td></tr></table></figure><h3 id="多个返回值"><a href="#多个返回值" class="headerlink" title="多个返回值"></a>多个返回值</h3><p>一个函数可以指定多个返回值，通过逗号<code>,</code>分隔：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide_exact</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    quotient = n // d</span><br><span class="line">    remainder = n % d</span><br><span class="line">    <span class="keyword">return</span> quotient, remainder</span><br></pre></td></tr></table></figure><p>任何调用该函数的代码都应该用<code>,</code>来解包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q, r = divide_exact(<span class="number">618</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="Doctests"><a href="#Doctests" class="headerlink" title="Doctests"></a>Doctests</h3><p><code>doctest</code>可以检查函数的输入输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide_exact</span>(<span class="params">n, d</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; q, r = divide_exact(2021, 10)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; q</span></span><br><span class="line"><span class="string">    202</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; r</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    quotient = n // d</span><br><span class="line">    remainder = n % d</span><br><span class="line">    <span class="keyword">return</span> quotient, remainder</span><br></pre></td></tr></table></figure><p><code>doctest</code>会搜索类似交互式Python会话的片段，然后执行这些会话来验证是否一致。</p><p><a href="https://docs.python.org/3/library/doctest.html">doctest — Test interactive Python examples — Python 3.10.1 documentation</a></p><h2 id="布尔表达式"><a href="#布尔表达式" class="headerlink" title="布尔表达式"></a>布尔表达式</h2><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p><strong>布尔值</strong>要么是<code>True</code>要么是<code>False</code>，很常用。</p><p>比如谷歌地图用布尔值确定是否在驾驶路线中避免高速路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avoid_highways = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>比如推特用布尔值记住用户是否允许个性化广告：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personalized_ads = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h3><table><thead><tr><th>操作符</th><th>意义</th><th>为真的表达式</th></tr></thead><tbody><tr><td><code>==</code></td><td>等于</td><td><code>32 == 32</code></td></tr><tr><td><code>!=</code></td><td>不等于</td><td><code>32 != 31</code></td></tr><tr><td><code>&gt;</code></td><td>大于</td><td><code>92 &gt; 32</code></td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td><td><code>92 &gt;= 32</code>，<code>32 &gt;= 32</code></td></tr><tr><td><code>&lt;</code></td><td>小于</td><td><code>20 &lt; 32</code></td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td><td><code>20 &lt;= 32</code></td></tr></tbody></table><p>注意：不要混用<code>=</code>和<code>==</code>。</p><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><table><thead><tr><th>操作符</th><th>意义</th><th>为真的表达式</th></tr></thead><tbody><tr><td><code>and</code></td><td>与，两边都为真结果才为真</td><td><code>4 &gt; 0 and -2 &lt; 0</code></td></tr><tr><td><code>or</code></td><td>或，两边有一个为真结果就为真</td><td><code>4 &gt; 0 or -2 &gt; 0</code></td></tr><tr><td><code>not</code></td><td>非，对真用就变成假，对假用就变成真</td><td><code>not (5 == 0)</code></td></tr></tbody></table><h3 id="复合布尔值"><a href="#复合布尔值" class="headerlink" title="复合布尔值"></a>复合布尔值</h3><p>如果要在单个表达式中组合多个操作符，应该用括号来分组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">may_have_mobility_issues = (age &gt;= <span class="number">0</span> <span class="keyword">and</span> age &lt; <span class="number">2</span>)  <span class="keyword">or</span> age &gt; <span class="number">90</span></span><br></pre></td></tr></table></figure><h3 id="函数中的布尔表达式"><a href="#函数中的布尔表达式" class="headerlink" title="函数中的布尔表达式"></a>函数中的布尔表达式</h3><p>函数可以用布尔值作为返回值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">passed_class</span>(<span class="params">grade</span>):</span></span><br><span class="line">    <span class="keyword">return</span> grade &gt; <span class="number">65</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">should_wear_jacket</span>(<span class="params">is_rainy, is_windy</span>):</span></span><br><span class="line">    <span class="keyword">return</span> is_rainy <span class="keyword">or</span> is_windy</span><br></pre></td></tr></table></figure><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="语句-1"><a href="#语句-1" class="headerlink" title="语句"></a>语句</h3><p>解释器执行一条语句来执行一个动作，已经遇到的有：</p><ol><li><p>赋值语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;sosuke&#x27;</span></span><br><span class="line">greeting = <span class="string">&#x27;ahoy, &#x27;</span> + name</span><br></pre></td></tr></table></figure></li><li><p>函数定义语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ahoy, &#x27;</span> + name</span><br></pre></td></tr></table></figure></li><li><p>返回语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">&#x27;ahoy, &#x27;</span> + name</span><br></pre></td></tr></table></figure></li></ol><h3 id="复合语句"><a href="#复合语句" class="headerlink" title="复合语句"></a>复合语句</h3><p>一个复合语句包含一组其他语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;header&gt;:</span><br><span class="line">    &lt;statement&gt;</span><br><span class="line">    &lt;statement&gt;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&lt;separating header&gt;:</span><br><span class="line">    &lt;statement&gt; </span><br><span class="line">    &lt;statement&gt;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>第一行的头类型，每个复合语句的头控制后面跟着的语句。</p><p>整个复合语句叫做一个<strong>clause</strong>，后面跟着的语句序列叫做<strong>suite</strong>，不知道怎么翻译更贴切。</p><h3 id="Suites的执行"><a href="#Suites的执行" class="headerlink" title="Suites的执行"></a>Suites的执行</h3><p><strong>Suite</strong>就是上一部分的一个语句序列，执行规则：</p><ol><li>执行第一条语句；</li><li>除非另有指示，不然执行剩余的语句；</li></ol><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="条件语句-1"><a href="#条件语句-1" class="headerlink" title="条件语句"></a>条件语句</h3><p>条件语句基于确定的条件是否成立来决定是否执行suite：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;condition&gt;:</span><br><span class="line">    &lt;statement&gt;</span><br><span class="line">    &lt;statement&gt;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clothing = <span class="string">&quot;shirt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> temperature &lt; <span class="number">32</span>:</span><br><span class="line">    clothing = <span class="string">&quot;jacket&quot;</span></span><br></pre></td></tr></table></figure><h3 id="复合条件"><a href="#复合条件" class="headerlink" title="复合条件"></a>复合条件</h3><p>条件语句可以包含任意数量的<code>elif</code>语句来检查其他条件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;condition&gt;:</span><br><span class="line">    &lt;statement&gt;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">elif</span> &lt;condition&gt;:</span><br><span class="line">    &lt;statement&gt;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">elif</span> &lt;condition&gt;:</span><br><span class="line">    &lt;statement&gt;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">clothing = <span class="string">&quot;shirt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> temperature &lt; <span class="number">0</span>:</span><br><span class="line">    clothing = <span class="string">&quot;snowsuit&quot;</span></span><br><span class="line"><span class="keyword">elif</span> temperature &lt; <span class="number">32</span>:</span><br><span class="line">    clothing = <span class="string">&quot;jacket&quot;</span></span><br></pre></td></tr></table></figure><h3 id="else语句"><a href="#else语句" class="headerlink" title="else语句"></a><code>else</code>语句</h3><p>条件语句可以包含一个<code>else</code>来指定在前面的条件都不满足时执行的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;condition&gt;:</span><br><span class="line">    &lt;statement&gt;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">elif</span> &lt;condition&gt;:</span><br><span class="line">    &lt;statement&gt;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span> &lt;condition&gt;:</span><br><span class="line">    &lt;statement&gt;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> temperature &lt; <span class="number">0</span>:</span><br><span class="line">    clothing = <span class="string">&quot;snowsuit&quot;</span></span><br><span class="line"><span class="keyword">elif</span> temperature &lt; <span class="number">32</span>:</span><br><span class="line">    clothing = <span class="string">&quot;jacket&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    clothing = <span class="string">&quot;shirt&quot;</span></span><br></pre></td></tr></table></figure><h3 id="条件语句总结"><a href="#条件语句总结" class="headerlink" title="条件语句总结"></a>条件语句总结</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">    sign = <span class="string">&quot;negative&quot;</span></span><br><span class="line"><span class="keyword">elif</span> num &gt; <span class="number">0</span>:</span><br><span class="line">    sign = <span class="string">&quot;positive&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    sign = <span class="string">&quot;neutral&quot;</span></span><br></pre></td></tr></table></figure><ol><li>总是以<code>if</code>子句开头；</li><li>0个或多个<code>elif</code>子句；</li><li>0个过一个<code>else</code>子句，总是在最后一个；</li></ol><h3 id="条件语句的执行"><a href="#条件语句的执行" class="headerlink" title="条件语句的执行"></a>条件语句的执行</h3><p>每个子句按顺序来执行：</p><ol><li>求头表达式的值；</li><li>如果结果是真，执行这个子句下的suite并跳过剩下的子句；</li><li>否则，继续执行下一条子句；</li></ol><h3 id="函数中的条件语句"><a href="#函数中的条件语句" class="headerlink" title="函数中的条件语句"></a>函数中的条件语句</h3><p>一种常见的情况就是条件语句基于函数的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_number_sign</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">        sign = <span class="string">&quot;negative&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> num &gt; <span class="number">0</span>:</span><br><span class="line">        sign = <span class="string">&quot;positive&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sign = <span class="string">&quot;neutral&quot;</span></span><br><span class="line">    <span class="keyword">return</span> sign</span><br><span class="line"></span><br><span class="line">get_number_sign(<span class="number">50</span>)  <span class="comment"># &quot;positive&quot;</span></span><br><span class="line">get_number_sign(-<span class="number">1</span>)  <span class="comment"># &quot;negative&quot;</span></span><br><span class="line">get_number_sign(<span class="number">0</span>)   <span class="comment"># &quot;neutral&quot;</span></span><br></pre></td></tr></table></figure><h3 id="条件语句中的返回"><a href="#条件语句中的返回" class="headerlink" title="条件语句中的返回"></a>条件语句中的返回</h3><p>一个条件语句的分支可以以<code>return</code>语句结束，这样会退出整个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_number_sign</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;negative&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> num &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;positive&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;neutral&quot;</span></span><br><span class="line">    </span><br><span class="line">get_number_sign(<span class="number">50</span>)  <span class="comment"># &quot;positive&quot;</span></span><br><span class="line">get_number_sign(-<span class="number">1</span>)  <span class="comment"># &quot;negative&quot;</span></span><br><span class="line">get_number_sign(<span class="number">0</span>)   <span class="comment"># &quot;neutral&quot;</span></span><br></pre></td></tr></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a><code>while</code>循环</h2><h3 id="while循环-1"><a href="#while循环-1" class="headerlink" title="while循环"></a><code>while</code>循环</h3><p><code>while</code>循环的语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;condition&gt;:</span><br><span class="line">    &lt;statement&gt;</span><br><span class="line">    &lt;statement&gt;</span><br></pre></td></tr></table></figure><p>只要条件的结果为真，那后面的语句就会执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">multiplier = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> multiplier &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">9</span> * multiplier)</span><br><span class="line">    multiplier += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>循环可以缩短代码，并且很容易拓展为更多或更少次迭代。</p><h3 id="使用一个计数器变量"><a href="#使用一个计数器变量" class="headerlink" title="使用一个计数器变量"></a>使用一个计数器变量</h3><p>可以使用一个<strong>计数器变量</strong>来追踪迭代的次数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">total = <span class="number">0</span></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> counter &lt; <span class="number">5</span>:</span><br><span class="line">  total += <span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">  counter += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>计数器变量也可以参与循环中的计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">total = <span class="number">0</span></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> counter &lt; <span class="number">5</span>:</span><br><span class="line">  total += <span class="built_in">pow</span>(<span class="number">2</span>, counter)</span><br><span class="line">  counter += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="注意无限循环"><a href="#注意无限循环" class="headerlink" title="注意无限循环"></a>注意无限循环</h3><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">counter = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> counter &lt; <span class="number">5</span>:</span><br><span class="line">    total += <span class="built_in">pow</span>(<span class="number">2</span>, counter)</span><br></pre></td></tr></table></figure><p>会一直循环下去，因为条件始终满足，应该在循环中修改计数器变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">counter += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>还有这种情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">counter = <span class="number">6</span></span><br><span class="line"><span class="keyword">while</span> counter &gt; <span class="number">5</span>:</span><br><span class="line">  total += <span class="built_in">pow</span>(<span class="number">2</span>, counter)</span><br><span class="line">  counter += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>同样条件始终满足，应该修改初始化值和循环条件。</p><h3 id="循环的执行"><a href="#循环的执行" class="headerlink" title="循环的执行"></a>循环的执行</h3><ol><li>对头布尔表达式进行求值；</li><li>如果结果为真，则执行语句的suite，然后回到步骤1；</li></ol><h3 id="函数中的循环"><a href="#函数中的循环" class="headerlink" title="函数中的循环"></a>函数中的循环</h3><p>函数中的循环通常会使用参数来确定其重复的起始值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_up_squares</span>(<span class="params">start, end</span>):</span></span><br><span class="line">    counter = start</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> counter &lt;= end:</span><br><span class="line">      total += <span class="built_in">pow</span>(counter, <span class="number">2</span>)</span><br><span class="line">      counter += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line">sum_up_squares(<span class="number">1</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a><code>break</code>语句</h3><p>想要提前跳出循环，可以使用<code>break</code>语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">counter = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> counter &lt; <span class="number">200</span>:</span><br><span class="line">    <span class="keyword">if</span> counter % <span class="number">7</span> == <span class="number">0</span>:</span><br><span class="line">        first_multiple = counter</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    counter += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="while-True-的循环"><a href="#while-True-的循环" class="headerlink" title="while True:的循环"></a><code>while True:</code>的循环</h3><p>你要是很勇的话，可以这么写循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">counter = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> counter % <span class="number">62</span> == <span class="number">0</span>:</span><br><span class="line">        first_multiple = counter</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    counter += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>不过得确保不是无限循环。</p><h3 id="一个例子：质因子"><a href="#一个例子：质因子" class="headerlink" title="一个例子：质因子"></a>一个例子：质因子</h3><p>质数是大于1且仅能整除1和它本身的整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return True iff N is prime.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">1</span> <span class="keyword">and</span> smallest_factor(n) == n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smallest_factor</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the smallest value k&gt;1 that evenly divides N.&quot;&quot;&quot;</span></span><br><span class="line">    ???</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_factors</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the prime factors of N.&quot;&quot;&quot;</span></span><br><span class="line">    ???</span><br></pre></td></tr></table></figure><p>第一个函数不用修改，利用的是质数的定义：</p><ol><li>大于1；</li><li>最小的因子是他本身；</li></ol><p>第二个函数就是要求他的最小因子，思路必须是这样：</p><ol><li>计数器变量从2开始循环，最大到<code>n</code>，计算<code>n</code>是否整除计数器变量；</li><li>如果可以整除，返回计数器变量的值；</li><li>否则计数器变量加一，进入下一循环；</li></ol><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smallest_factor</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the smallest value k&gt;1 that evenly divides N.&quot;&quot;&quot;</span></span><br><span class="line">    counter = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> counter &lt;= n:</span><br><span class="line">        <span class="keyword">if</span> n % counter == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> counter</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n <span class="comment"># 其实不会执行到这一步</span></span><br></pre></td></tr></table></figure><p>第三个函数是要输出所有因子，思路如下：</p><ol><li>用<code>smallest_factor()</code>函数找到<code>n</code>的最小因子，输出这个因子；</li><li><code>n /= factor</code>，返回第一步；</li></ol><p>可以用递归的思想，但其实效率不高，也可以就单纯循环，单纯用循环代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_factors</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the prime factors of N.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">1</span>:</span><br><span class="line">        factor = smallest_factor(n)</span><br><span class="line">        <span class="built_in">print</span>(factor)</span><br><span class="line">        n = n // factor</span><br></pre></td></tr></table></figure><p>其实上面的代码可以改函数参数的话是可以进一步优化的：</p><ol><li>既然<code>counter</code>已经是<code>n</code>的最小质因子，那么<code>n // counter</code>的最小质因子肯定不小于<code>counter</code>，也就是说继续计算最小质因子的时候可以从上一轮的最小质因子开始遍历；</li><li>在循环查找最小质因子时，<code>counter</code>超过<code>n</code>的平方根后就可以不用继续了，直接返回<code>n</code>即可；</li></ol><p>那么稍微优化一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_factors</span>(<span class="params">n</span>):</span></span><br><span class="line">    factor = <span class="number">2</span></span><br><span class="line">    upper = sqrt(n)</span><br><span class="line">    <span class="keyword">while</span> factor &lt;= upper:</span><br><span class="line">        <span class="keyword">if</span> n % factor == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(factor)</span><br><span class="line">            n //= factor</span><br><span class="line">            upper = sqrt(n)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            factor += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure><p>虽然效率还是很低，但至少比之前快很多！</p><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><h3 id="Largest-Factor"><a href="#Largest-Factor" class="headerlink" title="Largest Factor"></a>Largest Factor</h3><p>写一个函数，输入是大于1的整数<code>n</code>，要返回<code>n</code>的小于<code>n</code>的最大因子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">largest_factor</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the largest factor of n that is smaller than n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(15) # factors are 1, 3, 5</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(80) # factors are 1, 2, 4, 5, 8, 10, 16, 20, 40</span></span><br><span class="line"><span class="string">    40</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(13) # factor is 1 since 13 is prime</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>直接从<code>n-1</code>开始往1循环就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">largest_factor</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the largest factor of n that is smaller than n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(15) # factors are 1, 3, 5</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(80) # factors are 1, 2, 4, 5, 8, 10, 16, 20, 40</span></span><br><span class="line"><span class="string">    40</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(13) # factor is 1 since 13 is prime</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    factor = n - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> factor &gt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> n % factor == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> factor</span><br><span class="line">        factor -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="If-Function-Refactor"><a href="#If-Function-Refactor" class="headerlink" title="If Function Refactor"></a>If Function Refactor</h3><p>有两个函数有相似的结构，都用<code>if</code>语句防止<code>x</code>为0时的除零错误（ZeroDivisionError）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert</span>(<span class="params">x, limit</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return 1/x, but with a limit.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x = 0.2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; 1/x</span></span><br><span class="line"><span class="string">    5.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; invert(x, 100)</span></span><br><span class="line"><span class="string">    5.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; invert(x, 2)    # 2 is smaller than 5</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x = 0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; invert(x, 100)  # No error, even though 1/x divides by 0!</span></span><br><span class="line"><span class="string">    100</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="number">1</span>/x, limit)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> limit</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>(<span class="params">x, y, limit</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return abs(y - x) as a fraction of x, but with a limit.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x, y = 2, 5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; abs(y - x) / x</span></span><br><span class="line"><span class="string">    1.5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; change(x, y, 100)</span></span><br><span class="line"><span class="string">    1.5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; change(x, y, 1)    # 1 is smaller than 1.5</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x = 0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; change(x, y, 100)  # No error, even though abs(y - x) / x divides by 0!</span></span><br><span class="line"><span class="string">    100</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">abs</span>(y - x) / x, limit)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> limit</span><br></pre></td></tr></table></figure><p>重构的意思是重写一个程序，保持相同的功能但是设计上有变化。</p><p>这里给了个重构，定义了一个新的函数<code>limited</code>来包含他们的共同结构，这样每个函数就只有一行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">limited</span>(<span class="params">x, z, limit</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(z, limit)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> limit</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert_short</span>(<span class="params">x, limit</span>):</span></span><br><span class="line">    <span class="keyword">return</span> limited(x, <span class="number">1</span>/x, limit)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_short</span>(<span class="params">x, y, limit</span>):</span></span><br><span class="line">    <span class="keyword">return</span> limited(x, <span class="built_in">abs</span>(y - x) / x, limit)</span><br></pre></td></tr></table></figure><p>但是这个重构有问题，执行<code>invert_short(0, 100)</code>会导致ZeroDivisionError，为什么？</p><p>问题1：为什么会报错？</p><p>问题2：修改代码。</p><p>回答1：因为在<code>invert_short()</code>里面调用的是<code>limited()</code>函数，首先是需要把输入参数表达式计算出来传递给<code>limited()</code>的参数，因此这里就已经在尝试计算<code>1/x</code>了，所以会报错，<code>limited()</code>里面的判断没有起到作用。</p><p>回答2：把除法放到<code>limited()</code>函数里面执行即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">limited</span>(<span class="params">x, z, limit</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(z/x, limit)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> limit</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invert_short</span>(<span class="params">x, limit</span>):</span></span><br><span class="line">    <span class="keyword">return</span> limited(x, <span class="number">1</span>, limit)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_short</span>(<span class="params">x, y, limit</span>):</span></span><br><span class="line">    <span class="keyword">return</span> limited(x, <span class="built_in">abs</span>(y - x), limit)</span><br></pre></td></tr></table></figure><h3 id="Hailstone"><a href="#Hailstone" class="headerlink" title="Hailstone"></a>Hailstone</h3><p>拿普利策奖的Douglas Hofstadter在Pulitzer-prize-winning book里面提出了一个数学谜题：</p><ol><li>选一个正整数<code>n</code>作为开始;</li><li>如果<code>n</code>是偶数，那就除以2；</li><li>如果<code>n</code>是奇数，那就乘以3再加1；</li><li>重复过程，直到<code>n</code>为1.</li></ol><p>这个数会增增减减但是最后还是会变成1，试了很多数字都没问题，也没法证明这个序列会终止。冰雹在降落的时候也会上上下下，因此这种序列就叫冰雹序列。</p><p>现在就是要写一个函数，输出过程中的数，并返回这个序列的步数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hailstone</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the hailstone sequence starting at n and return its</span></span><br><span class="line"><span class="string">    length.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = hailstone(10)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>直接写个循环就行了，循环里面判断奇偶，直到数变为1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hailstone</span>(<span class="params">n</span>):</span></span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n != <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            n = n // <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n = <span class="number">3</span> * n + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> counter</span><br></pre></td></tr></table></figure><p>题目还让试试输入为27的情况，测试了序列长度为112，最终还是回到了1。</p><h3 id="Quine（附加题，Just-for-fun，浪费了我很久的时间）"><a href="#Quine（附加题，Just-for-fun，浪费了我很久的时间）" class="headerlink" title="Quine（附加题，Just for fun，浪费了我很久的时间）"></a>Quine（附加题，Just for fun，浪费了我很久的时间）</h3><p>写一个程序打印它自己，只能使用这些Python特性：</p><ol><li>数字；</li><li>赋值语句；</li><li>可以使用单引号或双引号表示的字符串文字；</li><li>加减乘除运算符；</li><li>内置的<code>print</code>函数；</li><li>内置的<code>eval</code>函数，这个函数会把字符串作为Python表达式求值；</li><li>内置的<code>repr</code>函数，会返回求值结果为他的参数的表达式；</li></ol><p>可以通过加号拼接两个字符串，通过乘号重复字符串，分号可以用于在一行内分隔多条语句，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=<span class="string">&#x27;c&#x27;</span>;<span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>);<span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span> + c * <span class="number">2</span>)</span><br><span class="line">a</span><br><span class="line">bcc</span><br></pre></td></tr></table></figure><p>打印自己的程序叫<strong>Quine</strong>，把解决方案方案多行字符串<code>quine</code>里面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">quine = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quine_test</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; quine_test()</span></span><br><span class="line"><span class="string">    QUINE!</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">import</span> contextlib, io</span><br><span class="line"></span><br><span class="line">    f = io.StringIO()</span><br><span class="line">    <span class="keyword">with</span> contextlib.redirect_stdout(f):</span><br><span class="line">        <span class="built_in">exec</span>(quine)</span><br><span class="line">    quine_output = f.getvalue()</span><br><span class="line">    <span class="keyword">if</span> quine == quine_output:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;QUINE!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Not a quine :(&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Code was:   %r&quot;</span> % quine)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Output was: %r&quot;</span> % quine_output)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Side by side:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(quine)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(quine_output)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span> * <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>提示是利用单双引号的关系，并把<code>repr</code>函数用在字符串上。</p><p>这题我不会，通过查资料和测试才得到正确结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quine= <span class="string">&#x27;&#x27;&#x27;var =  &quot;print(&#x27;var = &#x27;, repr(var) + &#x27;;&#x27;, &#x27;eval(var)&#x27;)&quot;; eval(var)\n&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>三引号里面才是quine的本体，它执行的结果和代码本身的文本是一致的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var =  <span class="string">&quot;print(&#x27;var = &#x27;, repr(var) + &#x27;;&#x27;, &#x27;eval(var)&#x27;)&quot;</span>; <span class="built_in">eval</span>(var)</span><br></pre></td></tr></table></figure><p>从结果来看肯定没问题，执行的话就是一句赋值加上一句<code>eval</code>，<code>eval</code>语句执行了字符串里面的内容，即执行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;var = &#x27;</span>, <span class="built_in">repr</span>(var) + <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;eval(var)&#x27;</span>)</span><br></pre></td></tr></table></figure><p>但是具体是怎么得到的，我能力有限，还是难以理解。</p>]]></content>
      
      
      <categories>
          
          <category> UC Berkeley EECS </category>
          
          <category> UC Berkeley EECS CS61A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS61A </tag>
            
            <tag> UC Berkeley </tag>
            
            <tag> The Structure and Interpretation of Computer Programs </tag>
            
            <tag> 入门级别课程 </tag>
            
            <tag> Homework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS61A——Lec-02-函数（含HW-01上）</title>
      <link href="/2022/01/02/CS61A-02-Functions/"/>
      <url>/2022/01/02/CS61A-02-Functions/</url>
      
        <content type="html"><![CDATA[<h2 id="表达式和值"><a href="#表达式和值" class="headerlink" title="表达式和值"></a>表达式和值</h2><h3 id="程序干了些啥"><a href="#程序干了些啥" class="headerlink" title="程序干了些啥"></a>程序干了些啥</h3><ol><li><p>程序通过操纵<strong>值</strong>来运行；</p></li><li><p>程序中的<strong>表达式</strong>求值为<strong>值</strong>；</p><p>表达式：<code>&#39;d&#39; + &#39;og&#39;</code>;</p><p>值：<code>&#39;dog&#39;</code></p></li><li><p>Python解释器求表达式的值然并显示值</p></li></ol><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>每个值都有特定的数据类型：</p><table><thead><tr><th>数据类型</th><th>示例值</th></tr></thead><tbody><tr><td>整数（Integer）</td><td><code>2</code>、<code>33</code>、<code>-1</code></td></tr><tr><td>浮点数（Float）</td><td><code>2.71</code>、<code>33.0</code>、<code>-1.9</code></td></tr><tr><td>布尔值（Boolean）</td><td><code>True</code>、<code>False</code></td></tr><tr><td>字符串（String）</td><td><code>&#39;dag&#39;</code>、<code>&#39;33&#39;</code>、<code>&#39;asdg-!@&#39;</code></td></tr></tbody></table><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>每个表达式都描述了一个计算并求值，比如可以使用运算符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">18</span> + <span class="number">72</span></span><br><span class="line"><span class="number">6</span> / <span class="number">29</span></span><br><span class="line"><span class="number">2</span> * <span class="number">10</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">32</span></span><br></pre></td></tr></table></figure><h3 id="调用表达式"><a href="#调用表达式" class="headerlink" title="调用表达式"></a>调用表达式</h3><p>一些表达式调用了函数，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">32</span>)</span><br><span class="line"><span class="built_in">max</span>(<span class="number">2</span>, <span class="number">2048</span>)</span><br><span class="line"><span class="built_in">min</span>(-<span class="number">1</span>, -<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>用运算符的也可以表示为调用函数，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">32</span></span><br><span class="line"><span class="built_in">pow</span>(<span class="number">2</span>, <span class="number">32</span>)</span><br></pre></td></tr></table></figure><p>甚至可以这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line"><span class="number">18</span> + <span class="number">69</span></span><br><span class="line">add(<span class="number">18</span>, <span class="number">69</span>)</span><br></pre></td></tr></table></figure><p>区别在于<code>pow()</code>函数是内置的（<strong>built-in</strong>），Python环境自带，但是像<code>add</code>这种就得从标准库中导入（import）进来。</p><h3 id="一个调用表达式的分析"><a href="#一个调用表达式的分析" class="headerlink" title="一个调用表达式的分析"></a>一个调用表达式的分析</h3><p><img src="/2022/01/02/CS61A-02-Functions/image-20220102024904177.png" alt="image-20220102024904177"></p><p>Python计算调用表达式的过程：</p><ol><li>求操作符（Operator）的值；</li><li>求操作数（Operand）的值；</li><li>把操作符（<strong>函数</strong>）应用到操作数（<strong>参数</strong>）上；</li></ol><p>操作符和操作数也都是表达式，所以必须要被求值。</p><h3 id="计算嵌套表达式"><a href="#计算嵌套表达式" class="headerlink" title="计算嵌套表达式"></a>计算嵌套表达式</h3><p><img src="/2022/01/02/CS61A-02-Functions/image-20220102025249148.png" alt="image-20220102025249148"></p><p>这就是一个表达式树（Expression Tree）</p><p>从外到里调用，从里到外返回值。</p><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><h3 id="命名-1"><a href="#命名-1" class="headerlink" title="命名"></a>命名</h3><p>一个命名可以绑定到一个值上，一种方法就是声明语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span> <span class="comment"># x是命名，1是值</span></span><br></pre></td></tr></table></figure><p>这个值也可以是表达式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span> + <span class="number">2</span> * <span class="number">3</span> - <span class="number">4</span> / <span class="number">5</span> <span class="comment"># x是命名，1 + 2 * 3 - 4 / 5是值</span></span><br></pre></td></tr></table></figure><h3 id="使用命名"><a href="#使用命名" class="headerlink" title="使用命名"></a>使用命名</h3><p>一个命名可以被引用多次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">result1 = x * y</span><br><span class="line">result2 = x + y</span><br></pre></td></tr></table></figure><p>绑定到数据值的命名就叫做变量。</p><h3 id="命名重绑定"><a href="#命名重绑定" class="headerlink" title="命名重绑定"></a>命名重绑定</h3><p>一个命名只能绑定一个值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_name = <span class="string">&quot;3rr0r&quot;</span></span><br><span class="line">my_name = my_name + <span class="string">&quot;0r0r&quot;</span></span><br></pre></td></tr></table></figure><p>代码不会保存，但<code>my_name</code>会绑定新的值<code>3rr0r0r0r</code>。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>下面的代码输出啥？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">min</span></span><br><span class="line">f = <span class="built_in">max</span></span><br><span class="line">g = <span class="built_in">min</span></span><br><span class="line">h = <span class="built_in">max</span></span><br><span class="line"><span class="built_in">max</span> = g</span><br><span class="line"><span class="built_in">max</span>(f(<span class="number">2</span>, g(h(<span class="number">1</span>, <span class="number">5</span>), <span class="number">3</span>)), <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>结果为<strong>3</strong>。</p><h2 id="环境图表"><a href="#环境图表" class="headerlink" title="环境图表"></a>环境图表</h2><h3 id="环境图表（Environment-diagrams）"><a href="#环境图表（Environment-diagrams）" class="headerlink" title="环境图表（Environment diagrams）"></a>环境图表（Environment diagrams）</h3><p>环境图表用于可视化Python是如何执行程序的。</p><p>这个网页可以生成环境图表<a href="https://pythontutor.com/composingprograms.html#mode=edit">Online Python Tutor - Composing Programs - Python 3</a>)。</p><p><img src="/2022/01/02/CS61A-02-Functions/image-20220102161519234.png" alt="image-20220102161519234"></p><p>左边一栏箭头指示指令执行的顺序，绿的表示刚执行过了，红色表示马上执行。</p><p>右边每个命名绑定到一个值上，一帧内每个命名不能重复。</p><h3 id="环境图表中的赋值"><a href="#环境图表中的赋值" class="headerlink" title="环境图表中的赋值"></a>环境图表中的赋值</h3><p>Python解释赋值语句的过程：</p><ol><li>求<code>=</code>右边的表达式；</li><li>绑定表达式的值到<code>=</code>左边的命名上；</li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h3><p>函数是一个代码序列，执行一个特定的任务，可以被重复使用。</p><p>比如已经用过的两个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">18</span>, <span class="number">69</span>)</span><br><span class="line">mul(<span class="number">60</span>, sub(<span class="number">5</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>每个函数接受输入（参数，argument）并返回一个输出（返回值，return value）。</p><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>Python中最常用的定义函数的方法是<code>def</code>语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> &lt;函数名&gt;(<span class="params">&lt;参数列表&gt;</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &lt;<span class="keyword">return</span> 表达式&gt;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br></pre></td></tr></table></figure><p>定义完了之后，我们可以调用它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">add(<span class="number">18</span>, <span class="number">69</span>)</span><br></pre></td></tr></table></figure><h3 id="关于函数定义的分析"><a href="#关于函数定义的分析" class="headerlink" title="关于函数定义的分析"></a>关于函数定义的分析</h3><p>函数的第一行叫做函数签名（function signature），其后所有的行都是函数体（function body）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> &lt;<span class="title">name</span>&gt;(<span class="params">&lt;parameters&gt;</span>):</span>        <span class="comment"># ← 函数签名</span></span><br><span class="line">    <span class="keyword">return</span> &lt;<span class="keyword">return</span> expression&gt;   <span class="comment"># ← 函数体</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> &lt;<span class="title">name</span>&gt;(<span class="params">&lt;parameters&gt;</span>):</span>        <span class="comment"># ← 函数签名</span></span><br><span class="line">    <span class="keyword">return</span> &lt;<span class="keyword">return</span> expression&gt;   <span class="comment"># ← 函数体</span></span><br></pre></td></tr></table></figure><p>函数体可以有很多行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">num1, num2</span>):</span>             <span class="comment"># ← 函数签名</span></span><br><span class="line">    <span class="built_in">sum</span> = num1 + num2            <span class="comment"># ← 函数体</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>                   <span class="comment"># ← 函数体</span></span><br></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>可以传递任意表达式作为参数。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">add(x, y)</span><br><span class="line"></span><br><span class="line">x = <span class="number">3</span></span><br><span class="line">add(x * x, x + x)</span><br></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>关键词<code>return</code>会返回一个值给调用函数的地方，并退出函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = add(<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>也可以在表达式内部调用函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">big_sum = add(<span class="number">200</span>, <span class="number">412</span>) + add(<span class="number">312</span>, <span class="number">256</span>)</span><br></pre></td></tr></table></figure><p>还可以在函数中嵌套函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">huge_sum = add(add(<span class="number">200</span>, <span class="number">412</span>), add(<span class="number">312</span>, <span class="number">256</span>))</span><br></pre></td></tr></table></figure><h3 id="发现错误"><a href="#发现错误" class="headerlink" title="发现错误"></a>发现错误</h3><ol><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">    <span class="built_in">sum</span> = num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = add(<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>返回语句之后的语句不会再执行，那一行应该在返回语句之前。</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>():</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = add(<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>函数体中的语句指向了不存在的变量，这里它们应该是函数签名中的参数。</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">num1, num2</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = add(<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>函数体没有返回值，但是调用它的地方想用它的结果，所以应该有个返回<code>sum</code>的语句。</p></li></ol><h3 id="环境图表中的函数"><a href="#环境图表中的函数" class="headerlink" title="环境图表中的函数"></a>环境图表中的函数</h3><p>Python解释<code>def</code>语句的过程：</p><ol><li>用函数名（name）和参数列表（parameters）创建一个函数；</li><li>函数体设置为第一行之后的缩进的所有语句；</li><li>绑定函数名到函数体（类似于赋值语句）；</li></ol><p><img src="/2022/01/02/CS61A-02-Functions/image-20220102165146936.png" alt="image-20220102165146936"></p><h3 id="环境图表中的函数调用"><a href="#环境图表中的函数调用" class="headerlink" title="环境图表中的函数调用"></a>环境图表中的函数调用</h3><p>Python解释函数调用的过程：</p><ol><li>在环境中创建新的<strong>一帧</strong>；</li><li>绑定函数调用的参数（arguments）到该帧的参数列表（parameters）；</li><li>在新的帧中执行函数体；</li></ol><p><img src="/2022/01/02/CS61A-02-Functions/image-20220102165512600.png" alt="image-20220102165512600"></p><h2 id="关于命名的其他细节"><a href="#关于命名的其他细节" class="headerlink" title="关于命名的其他细节"></a>关于命名的其他细节</h2><h3 id="命名和环境"><a href="#命名和环境" class="headerlink" title="命名和环境"></a>命名和环境</h3><p>所有的Python代码都在一个<strong>环境</strong>（environment）的上下文中求值，环境就是帧的序列。</p><p>比如前面，调用<code>add</code>函数的地方就是全局帧（Global frame），进入函数后就是到了函数的局部帧（Local frame），也是全局帧的子帧。</p><h3 id="命名查找规则"><a href="#命名查找规则" class="headerlink" title="命名查找规则"></a>命名查找规则</h3><p>Python中在用户定义的函数中是怎么查找命名的（简化版本）：</p><ol><li>在局部帧中查找；</li><li>如果命名不在局部帧中，就到全局帧中查找；</li><li>如果都不在，那就抛出命名错误（NameError）；</li></ol><p>命名错误长这样：</p><img src="/2022/01/02/CS61A-02-Functions/image-20220102170356438.png" alt="image-20220102170356438" style="zoom:50%;"><h3 id="命名查找例子"><a href="#命名查找例子" class="headerlink" title="命名查找例子"></a>命名查找例子</h3><ol><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exclamify</span>(<span class="params">text</span>):</span></span><br><span class="line">    start_exclaim = <span class="string">&quot;¡&quot;</span></span><br><span class="line">    end_exclaim = <span class="string">&quot;!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> start_exclaim + text + end_exclaim</span><br><span class="line"></span><br><span class="line">exclamify(<span class="string">&quot;the snails are eating my lupines&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>第四行的<code>start_exclaim</code>在局部帧中找到；</li><li>第四行的<code>text</code>在<strong>局部帧</strong>中找到，因为调用函数的时候局部变量<code>text</code>被赋予了值；</li><li>第六行的<code>exclamify</code>在全局帧中找到，因为是在全局帧中定义的；</li></ol></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">start_exclaim = <span class="string">&quot;¡&quot;</span></span><br><span class="line">end_exclaim = <span class="string">&quot;❣️&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exclamify</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="keyword">return</span> start_exclaim + text + end_exclaim</span><br><span class="line"></span><br><span class="line">exclamify(<span class="string">&quot;the voles are digging such holes&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>第五行的<code>start_exclaim</code>在全局帧中找到；</li><li>第五行的<code>text</code>在局部帧中找到；</li><li>第六行的<code>exclamify</code>在全局帧中找到;</li></ol></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exclamify</span>(<span class="params">text</span>):</span></span><br><span class="line">    end_exclaim = <span class="string">&quot;⁉️️️&quot;</span></span><br><span class="line">    <span class="keyword">return</span> start_exclaim + text + end_exclaim</span><br><span class="line"></span><br><span class="line">exclamify(<span class="string">&quot;the voles are digging such holes&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li><code>start_exclaim</code>会导致报错“NameError”，因为它没赋值；</li><li>在调用<code>exclamify</code>函数，尝试执行到那条语句的时候才会报错；</li></ol></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>程序由<strong>语句</strong>或计算机指令组成，包括描述了如何求值的<strong>表达式</strong>；</li><li><strong>值</strong>可以赋值到<strong>命名</strong>上来避免重复计算；</li><li><strong>赋值语句</strong>将表达式的值赋值给当前<strong>环境</strong>的一个命名；</li><li><strong>函数</strong>封装了一系列将<strong>参数</strong>映射到<strong>返回值</strong>的语句；</li><li><strong><code>def</code>语句</strong>会创建一个具有特定<strong>参数</strong>和<strong>函数体</strong>的函数对象，并将其绑定到当前环境的一个命名上；</li><li>函数<strong>调用表达式</strong>将其<strong>运算符</strong>（函数）的值应用于值或<strong>操作数</strong>（一些参数）。</li></ol><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><h3 id="A-Plus-Abs-B"><a href="#A-Plus-Abs-B" class="headerlink" title="A Plus Abs B"></a>A Plus Abs B</h3><p>求<code>a</code>加上<code>b</code>的绝对值的值，填空：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_plus_abs_b</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a+abs(b), but without calling abs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, -3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> b &lt; <span class="number">0</span>:</span><br><span class="line">        f = _____</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = _____</span><br><span class="line">    <span class="keyword">return</span> f(a, b)</span><br></pre></td></tr></table></figure><p>第一个填<code>sub</code>，第二个填<code>add</code>。</p><h3 id="Two-of-Three"><a href="#Two-of-Three" class="headerlink" title="Two of Three"></a>Two of Three</h3><p>对于三个正数，返回其中两个最小值的数的平方和，填空，要求不超过一行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two_of_three</span>(<span class="params">x, y, z</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a*a + b*b, where a and b are the two smallest members of the</span></span><br><span class="line"><span class="string">    positive numbers x, y, and z.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(1, 2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 3, 1)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(10, 2, 8)</span></span><br><span class="line"><span class="string">    68</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 5, 5)</span></span><br><span class="line"><span class="string">    50</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> _____</span><br></pre></td></tr></table></figure><p>可以填<code>min(x, y) * min(x, y) + min(max(x, y), z) * min(max(x, y), z)</code>，但是非常不优雅，可以考虑填<code>x**2 + y**2 + z**2 - max(x, y, z)**2</code>。</p><p>虽然看起来更优雅了，但是计算量也更大了（只比较了一次，但计算了四次平方）。</p>]]></content>
      
      
      <categories>
          
          <category> UC Berkeley EECS </category>
          
          <category> UC Berkeley EECS CS61A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS61A </tag>
            
            <tag> UC Berkeley </tag>
            
            <tag> The Structure and Interpretation of Computer Programs </tag>
            
            <tag> 入门级别课程 </tag>
            
            <tag> Homework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS61A——Lec-01-Welcome!</title>
      <link href="/2022/01/02/CS61A-01-Welcome!/"/>
      <url>/2022/01/02/CS61A-01-Welcome!/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机科学的简单介绍"><a href="#计算机科学的简单介绍" class="headerlink" title="计算机科学的简单介绍"></a>计算机科学的简单介绍</h2><p><img src="/2022/01/02/CS61A-01-Welcome!/image-20220102014914184.png" alt="image-20220102014914184"></p><h2 id="课程主题"><a href="#课程主题" class="headerlink" title="课程主题"></a>课程主题</h2><ol><li>管理程序的复杂度（过程抽象、数据抽象、编程范式）</li><li>深入理解编程概念（用Python）</li><li>计算机如何解释计算机程序</li><li>不同类型的语言（Regex、BNF、SQL、Scheme）</li><li>解决问题的技巧（迭代和递归）</li></ol><h2 id="前置课程"><a href="#前置课程" class="headerlink" title="前置课程"></a>前置课程</h2><p>数学</p><p>顺便推荐了个课程：CS 10</p><h2 id="课程组成"><a href="#课程组成" class="headerlink" title="课程组成"></a>课程组成</h2><ol><li>讲座</li><li>实验</li><li>讨论</li><li>作业</li><li>项目</li><li>考试</li><li>文献</li></ol>]]></content>
      
      
      <categories>
          
          <category> UC Berkeley EECS </category>
          
          <category> UC Berkeley EECS CS61A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS61A </tag>
            
            <tag> UC Berkeley </tag>
            
            <tag> The Structure and Interpretation of Computer Programs </tag>
            
            <tag> 入门级别课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apng2gif各种问题的解决</title>
      <link href="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="事情起因"><a href="#事情起因" class="headerlink" title="事情起因"></a>事情起因</h2><p>追溯起来已经是两年多以前的事情了，当时有个表情包在Line上火了起来，之后血洗国内各大平台，这个表情包就是<strong>Menhera酱</strong>。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/NanaseKurumi.jpg" alt="NanaseKurumi"></p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/NanaseKonomi.jpg" alt="NanaseKonomi"></p><p>谁会抗拒可爱的事物呢？所以当时我就立志要把她们的表情包都给要了，最开始就是通过网友们的搬运，在百度网盘等地方收集。</p><p>但是时间久了，Menhera酱的热度也下去了，没有多少人再收集了，有多少人的喜欢能像我一样始终如一呢？</p><p>这时候我强迫症就来了，收集不完整那多难受啊，所以我决定亲自上Line收集。</p><p>上Line是需要魔法的，当时用了点魔法，又在Chrome上找了个插件，成功地把所有她们的表情都下载了下来。</p><p>但是！</p><p>Line上的动图是PNG格式的，更准确地来说是APNG格式的，这样的动图在微信上是用不了的，放上去就是张不动的图片，甚至背景还是黑乎乎的。</p><p>微信只支持GIF的动图，这我可忍不了，必须得给安排了！</p><h2 id="艰辛的转换历程"><a href="#艰辛的转换历程" class="headerlink" title="艰辛的转换历程"></a>艰辛的转换历程</h2><h3 id="找工具阶段"><a href="#找工具阶段" class="headerlink" title="找工具阶段"></a>找工具阶段</h3><p>最开始肯定是找别人做好的批量转换的工具，关键词搜apng2gif，当然有一堆博文和工具了。</p><p>尝试了一个据说很好用的工具isparta，下载了很久很久很久才下载好。转换时间很长，但结果转换出来很多都有问题，在电脑上可以正常播放，但发送到微信上<strong>一遍播放完了就会花屏</strong>。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/e38e75791d5535498e6c9c0b3463f07.jpg" alt="e38e75791d5535498e6c9c0b3463f07"></p><p>感觉可能是版本bug，就有花了好久下载其他版本，结果都不好用，只能放弃了这个软件。</p><p>然后又找到了一个在线转换的网站，需要配置很多参数，生成了一张试试效果居然还不错。</p><p>但是这个网站毕竟在线的，自动化程度不高，网络连接也比较慢，批量处理肯定是个大工程，只好放弃了。</p><p>这是第一次尝试。</p><h3 id="自己造轮子阶段"><a href="#自己造轮子阶段" class="headerlink" title="自己造轮子阶段"></a>自己造轮子阶段</h3><p>后来的某一天又想起了这件事，决定重新思考一下怎么弄。</p><p>APNG格式诞生这么长时间了，肯定有很多资料吧？</p><p>思路是这样的，APNG是动图，肯定是由很多帧组成的，把这些帧给提取出来，然后再合成GIF不就行了？</p><p>找了一些资料，写了一个python程序，导出了一张APNG的各帧。</p><p>结果发现问题很大，APNG的每一帧并不是完整的一张图片，而是和上一帧有变化的地方！</p><p>最后合成出来的东西就很鬼畜，参见下图：</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/69594924.gif" alt="69594924"></p><p>心情就很不美丽了，费这么大劲你给我合成出了啥奇怪的东西？</p><p>又在Github上找到了一个湾湾同胞写的python程序，反复调试运行都没法得到正确结果。</p><p>后来也有构思，还是解析合成的思路，只要把每一帧放在相应的坐标就行了，但是想了想太复杂就放弃了。</p><p>这是第二次尝试</p><h3 id="改造轮子阶段"><a href="#改造轮子阶段" class="headerlink" title="改造轮子阶段"></a>改造轮子阶段</h3><p>这两天看到了七濑胡桃公众号推送的文章，其中有一张可爱的动图，就转发给了对象，结果她直呼好可爱！</p><p>虽然尝试了那么多次，也失败了那么多次，但是这次一定要成功。</p><h4 id="发现新轮子"><a href="#发现新轮子" class="headerlink" title="发现新轮子"></a>发现新轮子</h4><p>思路还是先看看有没有现成的轮子，当然是有的！</p><p>我尝试了pip中的apng2gif包，完全不好使，甚至正常播放都不行。于是去找到了源代码，结果……</p><p>这不就是我上次参考的那个Github上的源代码吗？</p><p>放弃！</p><p>但是，我在命令行中不小心输入了apng2gif，忘记了加后缀，结果提示我可以通过apt安装？</p><p>原来Linux上也是有现成轮子可以用的！赶紧apt了下来。</p><p>这个程序的使用很简单：</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/1603255890727.png" alt="1603255890727"></p><p>试了一张APNG动图，导出的GIF效果居然还挺好？</p><p>立刻发到微信上试试，结果还是<strong>播放一遍就花屏</strong>，果然还是不靠谱。</p><h4 id="给轮子加一轮转换"><a href="#给轮子加一轮转换" class="headerlink" title="给轮子加一轮转换"></a>给轮子加一轮转换</h4><p>但是这个播放一遍就花屏问题，似乎就是因为它只循环了一遍？那我只需要把GIF的循环设置为一直循环不就可以了？</p><p>可惜的是这个工具并没有这个选项。</p><p>不过现在又可以造轮子了呀，这次只需要解析GIF的每一帧，然后合成，保存的时候设置loop为0就行了！</p><p>遗憾的是这么做还是存在问题。</p><p>有一个保存选项是disposal，设置为3的时候不会出现重影，但是存在部分帧只显示一部分的情况。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/new69594922.gif" alt="new69594922"></p><p>disposal设置为1或0的时候虽然会显示完整，但是会有重影。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/newani.gif" alt="newani"></p><p>再然后就是关于duration的奇怪问题，即使设置新gif的duration（帧间时长）和旧的duration一样，最后导出的gif的duration会变成两倍，不知何故！设置为一半时反而可以一样。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/1603256906973.png" alt="1603256906973"></p><p>总之还是有问题的。</p><h4 id="换个方式给轮子加一轮转换"><a href="#换个方式给轮子加一轮转换" class="headerlink" title="换个方式给轮子加一轮转换"></a>换个方式给轮子加一轮转换</h4><p>既然这个轮子和我的需求只相差一个loop的值的问题，那我直接修改那个值不就好了？</p><p>GIF文件中肯定有特定的位用来存放loop的值。去找了GIF文件格式，也不知怎么搞的，网上都是互相转载的，没有找到直接的资料，最后找到一份代码中倒是有文件的详细结构。</p><p>经过分析，对文件进行16进制搜索，找到“NETSCAPE2.0”，再往后数第三、四个字节就是了。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/1603257569580.png" alt="1603257569580"></p><p>将荧光笔标记的01改成00，loop就从一次变成无限循环了（下面两张分别为循环一次和无数次）。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/ani.gif" alt="ani"></p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/ani2.gif" alt="ani2"></p><p>这个方案确实有效！</p><p>那么编程思路也很简单，以16进制的方式读取文件，然后匹配并找到“NETSCAPE2.0”，确定loop值对应的位置，然后将值直接修改为0保存即可。</p><h4 id="修改轮子"><a href="#修改轮子" class="headerlink" title="修改轮子"></a>修改轮子</h4><p>但是我没有按照上一部分的思路去写程序，别问，问就是懒。</p><p>我们换个思路，既然apng2gif这个工具最后合成了GIF，必然也写入了loop位，我们直接修改该工具的源代码不就可以了？</p><p>费了好大劲从SourceForge上下载了源码，因为下载各种失败，然后切换镜像。</p><p>找到源代码之后就简单了，在代码中合成GIF之前的位置，加入一句代码即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num_loops = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>重新make生成可执行文件，再尝试转换发现达到了想要的效果。</p><p>make过程中提示“-lpng”选项的问题，通过apt安装<code>libpng-dev</code>即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libpng-dev</span><br></pre></td></tr></table></figure><h4 id="编写批处理程序"><a href="#编写批处理程序" class="headerlink" title="编写批处理程序"></a>编写批处理程序</h4><p>那么接下来，把执行apng2gif的过程变成批处理即可，这一步用shell或python都行，我用的是python（因为这段时间写了个千余行的shell脚本，现在不想写shell了）。</p><p>程序很简单，扫描所有后缀为.png的文件，调用apng2gif程序转换到gif文件夹下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trans</span>(<span class="params">filename</span>):</span></span><br><span class="line">    os.system(<span class="string">&quot;./apng2gif &quot;</span>+filename+<span class="string">&quot; gif/&quot;</span>+filename[:-<span class="number">4</span>]+<span class="string">&quot;.gif&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.png&#x27;</span>):</span><br><span class="line">            trans(filename)</span><br></pre></td></tr></table></figure><p>所以折腾了这么久，真正有效的代码量只有修改轮子1句c代码和批处理中的7句python代码（python代码甚至可以精简成三句！）？</p><p>其中<strong>解决问题</strong>的方式不一定难，但<strong>探索的过程</strong>一定艰难且有趣。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/107433842.gif" alt="107433842"></p><p><strong>保持好奇</strong>是探索发现的最大动力源泉。</p><p><img src="/2020/10/21/apng2gif%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/48859426.gif" alt="48859426"></p>]]></content>
      
      
      <categories>
          
          <category> 摸鱼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂事 </tag>
            
            <tag> apng </tag>
            
            <tag> apng2gif </tag>
            
            <tag> apng转gif </tag>
            
            <tag> 图片处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过GitHub搭建Hexo博客</title>
      <link href="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="为何使用Github"><a href="#为何使用Github" class="headerlink" title="为何使用Github"></a>为何使用Github</h3><ol><li>免费；</li><li>静态网页，不需要后台；</li><li>有版本管理；</li><li>代码也托管在Github上，不用整太多平台折腾；</li></ol><h3 id="为何使用Hexo"><a href="#为何使用Hexo" class="headerlink" title="为何使用Hexo"></a>为何使用Hexo</h3><ol><li>好看；</li><li>Markdown语法网页；</li><li>配置方便；</li><li>支持git；</li></ol><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>一台能上网的电脑；</li><li>脑子和手；</li></ol><h3 id="本文环境"><a href="#本文环境" class="headerlink" title="本文环境"></a>本文环境</h3><blockquote><p>Window 10 20H2 19042.572</p></blockquote><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><h3 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h3><p>进入<a href="https://github.com/" title="Github官网">Github官网</a>，点击右上角<strong>Sign up</strong>，后面随便点点就行。</p><p>如果有账号了，那就<strong>Sign in</strong>。</p><h3 id="新建Github-Pages仓库"><a href="#新建Github-Pages仓库" class="headerlink" title="新建Github Pages仓库"></a>新建Github Pages仓库</h3><p>点击<strong>Repositories</strong>，再点击<strong>New</strong></p><p><strong>Repository name</strong>设置为“<strong>你的用户名</strong>.github.io”，比如我的用户名是github-3rr0r，那我就需要设置为github-3rr0r.github.io。请注意，一定得这么设置，否则就无法成功生成Github Pages。</p><p>勾选“<strong>Public</strong>”，不然也无法成功。</p><p>其他的勾选不勾选无所谓，如下图所示。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/001.PNG" alt="001"></p><p>设置完成后跳转到如下界面：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/002.PNG" alt="002"></p><h3 id="安装Git客户端"><a href="#安装Git客户端" class="headerlink" title="安装Git客户端"></a>安装Git客户端</h3><p>前往<a href="https://git-scm.com/download/win" title="git-scm">git-scm</a>下载<strong>64-bit Git for Windows Setup</strong>，安装。</p><p>安装完成后打开Powershell，输入<code>git --version</code>验证是否安装成功。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/003.PNG" alt="003"></p><h3 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h3><h4 id="生成RSA密钥"><a href="#生成RSA密钥" class="headerlink" title="生成RSA密钥"></a>生成RSA密钥</h4><p>在Powershell中输入<code>ssh-keygen -t rsa -C &quot;你注册Github时用的邮件地址&quot;</code>。</p><p>第一个选项默认回车就行，后续输入生成密钥使用的字符串时，可以连续两次回车跳过，也可以自己输入，成功生成后结果如下：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/004.PNG" alt="004"></p><p>此时<code>.ssh</code>文件夹下会多出两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code>，分别为私钥文件和公钥文件。</p><p>用记事本打开<code>id_rsa.pub</code>文件，将其中内容全部复制。</p><h4 id="添加密钥到Github"><a href="#添加密钥到Github" class="headerlink" title="添加密钥到Github"></a>添加密钥到Github</h4><p>在Github中点击自己头像，然后点击<strong>Settings</strong>，跳转后点击<strong>SSH and GPG keys</strong>，再点击<strong>New SSH key</strong>。</p><p><strong>Title</strong>中填入好记的名字，用于辨识自己的哪台设备，<strong>Key</strong>中完整粘贴刚才复制的公钥文件内容，然后点击<strong>Add SSH key</strong>。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/005.PNG" alt="005"></p><p>完成后，<strong>SSH keys</strong>列表中将多出刚才添加密钥。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/006.PNG" alt="006"></p><p>接下来在Powershell中输入<code>ssh -T git@github.com</code>验证是否配置成功（此处命令不要修改）。</p><p>如果成功，将显示如下输出：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/007.PNG" alt="007"></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><h4 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h4><p>前往<a href="https://nodejs.org/zh-cn/" title="npm官网">npm官网</a>下载npm安装包，建议选择“长期支持版”。</p><p>除了设置安装路径以外，其他无脑下一步即可。</p><p>重新打开一个Powershell窗口（否则环境变量可能不会生效），输入<code>npm --version</code>验证是否安装成功。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/008.PNG" alt="008"></p><h4 id="通过npm安装Hexo"><a href="#通过npm安装Hexo" class="headerlink" title="通过npm安装Hexo"></a>通过npm安装Hexo</h4><p>安装好npm之后就可以安装Hexo了，命令为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> hexo</span><br></pre></td></tr></table></figure><p>安装完成后，执行hexo的初始化命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init Hexo  <span class="comment"># 新建文件夹Hexo，并在该文件夹下初始化hexo</span></span><br></pre></td></tr></table></figure><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/009.PNG" alt="009"></p><p>初始化时会下载一些文件，等待完成即可。这一步可能会因为网络原因卡住不动，删除文件夹后重试或者换个网络试试，实在不行那你就试试魔法。</p><p>完成初始化后，进入文件夹，可以通过<code>hexo --help</code>或<code>hexo h</code>来查看帮助，我们主要用到的三条指令如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g          <span class="comment"># 等价于hexo generate，用于生成静态网页文件</span></span><br><span class="line">hexo s          <span class="comment"># 等价于hexo server，启动本地的服务器，可以在本地预览博客</span></span><br><span class="line">hexo d          <span class="comment"># 等价于hexo deploy，配合Github用于部署生成的静态网页</span></span><br></pre></td></tr></table></figure><p>输入<code>hexo s</code>启动本地服务器，在浏览器输入<a href="http://localhost:4000/">http://localhost:4000</a>预览初始的博客，如果弹出防火墙提示，勾选并允许即可。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/010.PNG" alt="010"></p><p>浏览器中显示的结果如下：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/011.PNG" alt="011"></p><h3 id="部署博客到Github"><a href="#部署博客到Github" class="headerlink" title="部署博客到Github"></a>部署博客到Github</h3><h4 id="修改Hexo配置文件"><a href="#修改Hexo配置文件" class="headerlink" title="修改Hexo配置文件"></a>修改Hexo配置文件</h4><p>初始化hexo的文件夹下，<code>_config.yml</code>就是hexo的配置文件，可以通过任意文本编辑器打开，推荐使用Visual Studio Code。</p><p>开始的<strong>Site</strong>部分可以配置网站信息（包括语言），我的配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">3rr0r&#x27;s</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&quot;3rr0r&#x27;s Blog on Github&quot;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">3rr0r</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Github-3rr0r</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>URL</strong>部分修改url为自己的网址即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://github-3rr0r.github.io/</span></span><br></pre></td></tr></table></figure><p>前面两部分的设置不影响部署到Github，将配置文件拉到底，最后的<strong>Deployment</strong>部分才是重点。我修改后的配置如下（请注意我的主分支已经从master改成了main，如果未改动过则为默认的master）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:github-3rr0r/github-3rr0r.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>修改完成后保存即可。</p><h4 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h4><p>在Powershell中输入以下指令生成静态网页：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>成功的输出如下：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/012.PNG" alt="012"></p><p>部署到Github上：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>此时会出现以下错误：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/013.PNG" alt="013"></p><p>这是因为没有安装相关的插件，输入以下命令安装即可：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer</span><span class="literal">-git</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>完成后重新输入<code>hexo d</code>部署即可，成功部署输出如下：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/014.PNG" alt="014"></p><p>此时可以看到Github上该仓库已经上传了一些文件：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/015.PNG" alt="015"></p><p>但因为我的仓库主分支是main而不是master，所以需要对这个仓库做个设置才能使Github Pages生效。</p><p>进入仓库的<strong>Settings</strong>，将分支切换为<strong>main</strong>，点击<strong>Save</strong>。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/016.PNG" alt="016"></p><p>现在可以看到如下界面：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/017.PNG" alt="017"></p><p>但是点击这个链接进去，依然是巨大的<strong>404</strong>：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/018.PNG" alt="018"></p><p>经过排查发现找不到问题（可能是网络相关问题）？</p><p>那就稍微修改点啥，然后重新生成部署。</p><p>比如把<strong>author</strong>从<strong>Github-3rr0r</strong>修改为<strong>3rr0r</strong>，然后执行<code>hexo clean</code>清理生成的静态文件，之后重新生成文件并部署，刷新网页成功看到部署到Github上的博客主页：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/019.PNG" alt="019"></p><p>与本地看到的是一致的，部署成功。</p><p>到这里搭建就已经完成啦，下面开始添加第一篇博文！</p><h2 id="新建并发布博文"><a href="#新建并发布博文" class="headerlink" title="新建并发布博文"></a>新建并发布博文</h2><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>这一步可以方便图片管理，在配置文件<code>_config.yml</code>中的<strong>Writing</strong>部分找到<strong>post_asset_folder</strong>项，将false修改为true：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span>  <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>现在新建博文的时候，就会同时也生成一个同名文件夹。</p><h3 id="新建博文"><a href="#新建博文" class="headerlink" title="新建博文"></a>新建博文</h3><p>以本文为例，在Powershell中输入如下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 通过GitHub搭建Hexo博客</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/020.PNG" alt="020"></p><p>现在可以看到**_posts**文件夹下多出了一个Markdown文件和一个文件夹，在文件中存放图片等资源文件即可，然后再md文件中使用相对路径引用资源。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/021.PNG" alt="021"></p><p>md文件中会默认生成文章相关信息，可以自行修改。在其后按照Markdown格式写作即可，支持代码等一些特殊格式，用起来很方便。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/022.PNG" alt="022"></p><p>推荐的Markdown编辑器是<strong>Typora</strong>。</p><p>编辑完成后，就可以使用输入<code>hexo g</code>和<code>hexo s</code>在本地预览了。</p><h3 id="上传博文"><a href="#上传博文" class="headerlink" title="上传博文"></a>上传博文</h3><p>确定无误后，输入<code>hexo d</code>就可以将新博文部署到Github上了。</p><p>效果如下：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/023.PNG" alt="023"></p><p>但是存在两个问题，一是图片不能显示，二是首页就展示了整片博文。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/024.PNG" alt="024"></p><h3 id="图片不能正常显示问题的解决"><a href="#图片不能正常显示问题的解决" class="headerlink" title="图片不能正常显示问题的解决"></a>图片不能正常显示问题的解决</h3><p>对于第一个问题，需要下载一个插件来解决：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-asset</span><span class="literal">-image</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>但是这个插件有问题，首页显示的博文依然不显示图片，这需要对该插件进行修改。</p><p>找了一些资料，并没有人给出可用的解决方案，只能自己排查了，最后确定修改方案如下。</p><p>在<code>node_modules\hexo-asset-image</code>中找到该插件，打开<code>index.js</code>文件，找到下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="regexp">/.*\/index\.html$/</span>.test(link)) &#123;</span><br><span class="line">   <span class="comment">// when permalink is end with index.html, for example 2019/02/20/xxtitle/index.html</span></span><br><span class="line">   <span class="comment">// image in xxtitle/ will go to xxtitle/index/</span></span><br><span class="line">   appendLink = <span class="string">&#x27;index/&#x27;</span>;</span><br><span class="line">   <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>将<code>else</code>语句块中的<code>var endPos = link.lastIndexOf(&#39;.&#39;);</code>修改为<code>var endPos = link.lastIndexOf(&#39;/&#39;);</code>。也就是把点改成了斜杠。</p><p>重新<code>hexo clean</code>、<code>hexo g</code>、<code>hexo d</code>三连，就可以看到图片能够正常显示了。</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/025.PNG" alt="025"></p><h3 id="不让博文完整显示"><a href="#不让博文完整显示" class="headerlink" title="不让博文完整显示"></a>不让博文完整显示</h3><p>通过在markdown中插入以下标签可以解决问题：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2020/10/20/%E9%80%9A%E8%BF%87GitHub%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/026.PNG" alt="026"></p><h3 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h3><p>关于主题就不多说了，个人比较喜欢NexT主题，一些配置也非常人性化，大家可以自己探索。</p>]]></content>
      
      
      <categories>
          
          <category> 配环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> Blog搭建 </tag>
            
            <tag> Github Pages </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
